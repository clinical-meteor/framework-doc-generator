// This file is automatically generated by meteor-jsdoc. Regenerate it with 'meteor-jsdoc build'
DocsData = {
  "ActiveLayout.{{getAppTitle}}": {
    "examples": [
      "```html\n<h1>{{getAppTitle}}</h1>\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getAppTitle}}",
    "memberof": "ActiveLayout",
    "name": "{{getAppTitle}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the application title.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getConnection}}": {
    "examples": [
      "```html\n<div>{{getStatusLabelText}}</div>\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 41,
    "link": "The quick brown fox.",
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getConnection}}",
    "memberof": "ActiveLayout",
    "name": "{{getConnection}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Display the connection status of the Meteor app.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getCreatedAt}}": {
    "examples": [
      "```html\n<div>{{getCreatedAt}}</div>\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 154,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getCreatedAt}}",
    "memberof": "ActiveLayout",
    "name": "{{getCreatedAt}}",
    "returns": [
      {
        "type": {
          "names": [
            "DateString"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the timestamp of when the record was created, returned as a text string.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getNavWidth}}": {
    "examples": [
      "```html\n<nav style=\"{{getNavWidth}}\"></nav>\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 20,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getNavWidth}}",
    "memberof": "ActiveLayout",
    "name": "{{getNavWidth}}",
    "returns": [
      {
        "type": {
          "names": [
            "Style"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the calculated width of the navbar.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getStatusLabelColor}}": {
    "examples": [
      "```html\n<div>{{getStatusLabelText}}</div>\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 64,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getStatusLabelColor}}",
    "memberof": "ActiveLayout",
    "name": "{{getStatusLabelColor}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "see": [
      "'foo'"
    ],
    "since": "1.2.3",
    "summary": "Returns a color, based on the connection status of the Meteor app.",
    "todo:": "Upgrade from {String} to {Hex}",
    "version": "1.2.3"
  },
  "ActiveLayout.{{isAdmin}}": {
    "examples": [
      "```html\n{{#if isAdmin}}<div><!-- privat content --></div>{{/if}}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 88,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{isAdmin}}",
    "memberof": "ActiveLayout",
    "name": "{{isAdmin}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Checks the Roles package to see if user is an Admin.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{isLoggedIn}}": {
    "examples": [
      "```html\n{{#if isRole 'secretary'}}<div><!-- secretary content --></div>{{/if}}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 170,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{isLoggedIn}}",
    "memberof": "ActiveLayout",
    "name": "{{isLoggedIn}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Syntactic sugar for determining if the user is logged in.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{isRole}}": {
    "examples": [
      "```html\n{{#if isRole 'secretary'}}<div><!-- secretary content --></div>{{/if}}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 123,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{isRole}}",
    "memberof": "ActiveLayout",
    "name": "{{isRole}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Checks that the user has the specified type of role.",
    "version": "1.2.3"
  },
  "AutoForm.addFormType": {
    "access": "public",
    "definition": [
      {
        "description": "<p>A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the &quot;readonly&quot; and &quot;disabled&quot; form types use this function to add the &quot;readonly&quot; or &quot;disabled&quot; attribute, respectively, to every input within the form.</p>",
        "name": "adjustInputContext",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the &quot;update-pushArray&quot; form type uses this function to build and return a schema that is limited by the <code>scope</code> attribute on the form. When this function is called, <code>this</code> contains useful information about the form.</p>",
        "name": "adjustSchema",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Set to <code>true</code> if this form type should not show buttons for adding and removing items in an array field. The &quot;disabled&quot; and &quot;readonly&quot; form types do this.</p>",
        "name": "hideArrayItemButtons",
        "optional": true,
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>A function that does whatever should happen upon submission of this form type. When this function is called, <code>this</code> contains useful information about the form. At a minimum, you probably want to call <code>this.event.preventDefault()</code> to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in <code>this.formAttributes</code>. If you do any additional validation and it fails, you should call <code>this.failedValidation()</code>. When your logic is done, you should call <code>this.result(error, result)</code>. If you want to end the submission process without providing a result, call <code>this.endSubmission()</code>. If you don't call <code>this.result()</code> or <code>this.endSubmission()</code>, <code>endSubmit</code> hooks won't be called, so for example the submit button might remain disabled. <code>onError</code> hooks will be called only if you pass an error to <code>this.result()</code>. <code>onSuccess</code> hooks will be called only if you do not pass an error to <code>this.result()</code>.</p>",
        "name": "onSubmit",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A function that returns <code>true</code> if validation against the form schema should happen before the <code>onSubmit</code> function is called, or <code>false</code> if not. When this function is called, <code>this</code> contains useful information about the form. If this function is not provided for a form type, the default is <code>true</code>.</p>",
        "name": "shouldPrevalidate",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A function that validates the form and returns <code>true</code> if valid or <code>false</code> if not. This can happen during submission but also at other times. When this function is called, <code>this</code> contains useful information about the form and the validation options.</p>",
        "name": "validateForm",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 572,
    "longname": "AutoForm.addFormType",
    "memberof": "AutoForm",
    "name": "addFormType",
    "params": [
      {
        "description": "<p>The type string that this definition is for.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Defines how the submit type should work</p>",
        "name": "definition",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Use this method to add custom form types."
  },
  "AutoForm.addHooks": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 13,
    "longname": "AutoForm.addHooks",
    "memberof": "AutoForm",
    "name": "addHooks",
    "params": [
      {
        "description": "<p>Form <code>id</code> or array of form IDs to which these hooks apply. Specify <code>null</code> to add hooks that will run for every form.</p>",
        "name": "formIds",
        "type": {
          "names": [
            "Array.<String>",
            "String",
            "null"
          ]
        }
      },
      {
        "description": "<p>Hooks to add, where supported names are &quot;before&quot;, &quot;after&quot;, &quot;formToDoc&quot;, &quot;docToForm&quot;, &quot;onSubmit&quot;, &quot;onSuccess&quot;, and &quot;onError&quot;.</p>",
        "name": "hooks",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same\nform."
  },
  "AutoForm.addInputType": {
    "access": "public",
    "definition": [
      {
        "description": "<p>The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.</p>",
        "name": "componentName",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 556,
    "longname": "AutoForm.addInputType",
    "memberof": "AutoForm",
    "name": "addInputType",
    "params": [
      {
        "description": "<p>The type string that this definition is for.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Defines how the input type should be rendered.</p>",
        "name": "definition",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Use this method to add custom input components."
  },
  "AutoForm.debug": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 744,
    "longname": "AutoForm.debug",
    "memberof": "AutoForm",
    "name": "debug",
    "params": [],
    "scope": "static",
    "summary": "Call this method in client code while developing to turn on extra logging.\nYou need to call it just one time, usually in top level client code."
  },
  "AutoForm.findAttribute": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 658,
    "longname": "AutoForm.findAttribute",
    "memberof": "AutoForm",
    "name": "findAttribute",
    "params": [
      {
        "description": "<p>Attribute name</p>",
        "name": "attrName",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.</p>",
        "type": {
          "names": [
            "Any",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call this method from a UI helper. Might return undefined."
  },
  "AutoForm.findAttributesWithPrefix": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 699,
    "longname": "AutoForm.findAttributesWithPrefix",
    "memberof": "AutoForm",
    "name": "findAttributesWithPrefix",
    "params": [
      {
        "description": "<p>Attribute prefix</p>",
        "name": "prefix",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>An object containing all of the found attributes and their values, with the prefix removed from the keys.</p>",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached."
  },
  "AutoForm.getArrayCountFromDocForField": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 973,
    "longname": "AutoForm.getArrayCountFromDocForField",
    "memberof": "AutoForm",
    "name": "getArrayCountFromDocForField",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The field name (schema key)</p>",
        "name": "field",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Array count in the attached document.</p>",
        "type": {
          "names": [
            "Number",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Looks in the document attached to the form to see if the\nrequested field exists and is an array. If so, returns the\nlength (count) of the array. Otherwise returns undefined."
  },
  "AutoForm.getCurrentDataForForm": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 1008,
    "longname": "AutoForm.getCurrentDataForForm",
    "memberof": "AutoForm",
    "name": "getCurrentDataForForm",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Current data context for the form, or an empty object.</p>",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the current data context for a form.\nYou can call this without a formId from within a helper and\nthe data for the nearest containing form will be returned."
  },
  "AutoForm.getCurrentDataPlusExtrasForForm": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 1030,
    "longname": "AutoForm.getCurrentDataPlusExtrasForForm",
    "memberof": "AutoForm",
    "name": "getCurrentDataPlusExtrasForForm",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute</p>",
        "name": "formId",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Current data context for the form, or an empty object.</p>",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the current data context for a form plus some extra properties.\nYou can call this without a formId from within a helper and\nthe data for the nearest containing form will be returned."
  },
  "AutoForm.getFieldValue": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 400,
    "longname": "AutoForm.getFieldValue",
    "memberof": "AutoForm",
    "name": "getFieldValue",
    "params": [
      {
        "description": "<p>The name of the field for which you want the current value.</p>",
        "name": "fieldName",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The <code>id</code> attribute of the <code>autoForm</code> you want current values for. Default is the closest form from the current context.</p>",
        "name": "formId",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Any",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the value of the field (the value that would be used if the form were submitted right now).\nThis is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered."
  },
  "AutoForm.getFormCollection": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 1052,
    "longname": "AutoForm.getFormCollection",
    "memberof": "AutoForm",
    "name": "getFormCollection",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The Collection instance</p>",
        "type": {
          "names": [
            "Mongo.Collection",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the collection for a form from the `collection` attribute"
  },
  "AutoForm.getFormId": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 1082,
    "longname": "AutoForm.getFormId",
    "memberof": "AutoForm",
    "name": "getFormId",
    "params": [],
    "returns": [
      {
        "description": "<p>The containing form's <code>id</code> attribute value</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call in a helper to get the containing form's `id` attribute. Reactive."
  },
  "AutoForm.getFormSchema": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 1065,
    "longname": "AutoForm.getFormSchema",
    "memberof": "AutoForm",
    "name": "getFormSchema",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Pass the form data context as an optimization or if the form is not yet rendered.</p>",
        "name": "form",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The SimpleSchema instance</p>",
        "type": {
          "names": [
            "SimpleSchema",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the schema for a form, from the `schema` attribute if\nprovided, or from the schema attached to the `Mongo.Collection`\nspecified in the `collection` attribute. The form must be\ncurrently rendered."
  },
  "AutoForm.getFormValues": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 244,
    "longname": "AutoForm.getFormValues",
    "memberof": "AutoForm",
    "name": "getFormValues",
    "params": [
      {
        "description": "<p>The <code>id</code> attribute of the <code>autoForm</code> you want current values for.</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The template instance, if already known, as a performance optimization.</p>",
        "name": "template",
        "optional": true,
        "type": {
          "names": [
            "Template"
          ]
        }
      },
      {
        "description": "<p>The SimpleSchema instance, if already known, as a performance optimization.</p>",
        "name": "ss",
        "optional": true,
        "type": {
          "names": [
            "SimpleSchema"
          ]
        }
      },
      {
        "description": "<p>Set to <code>true</code> to return a modifier object or <code>false</code> to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.</p>",
        "name": "getModifier",
        "optional": true,
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object",
            "null"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns an object representing the current values of all schema-based fields in the form.\nThe returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen."
  },
  "AutoForm.getInputType": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 767,
    "longname": "AutoForm.getInputType",
    "memberof": "AutoForm",
    "name": "getInputType",
    "params": [
      {
        "description": "<p>The attributes provided to afFieldInput.</p>",
        "name": "atts",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The input type. Most are the same as the <code>type</code> attributes for HTML input elements, but some are special strings that autoform interprets.</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call this method from a UI helper to get the type string for the input control."
  },
  "AutoForm.getInputTypeTemplateNameForElement": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 437,
    "longname": "AutoForm.getInputTypeTemplateNameForElement",
    "memberof": "AutoForm",
    "name": "getInputTypeTemplateNameForElement",
    "params": [
      {
        "description": "<p>The input DOM element, generated by an autoform input control</p>",
        "name": "element",
        "type": {
          "names": [
            "DOMElement"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the name of the template used to render the element."
  },
  "AutoForm.getInputValue": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 463,
    "longname": "AutoForm.getInputValue",
    "memberof": "AutoForm",
    "name": "getInputValue",
    "params": [
      {
        "description": "<p>The input DOM element, generated by an autoform input control, which must have a <code>data-schema-key</code> attribute set to the correct schema key name.</p>",
        "name": "element",
        "type": {
          "names": [
            "DOMElement"
          ]
        }
      },
      {
        "description": "<p>Provide the SimpleSchema instance if you already have it.</p>",
        "name": "ss",
        "optional": true,
        "type": {
          "names": [
            "SimpleSchema"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the value of the field (the value that would be used if the form were submitted right now).\nUnlike `AutoForm.getFieldValue`, this function is not reactive."
  },
  "AutoForm.getLabelForField": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 904,
    "longname": "AutoForm.getLabelForField",
    "memberof": "AutoForm",
    "name": "getLabelForField",
    "params": [
      {
        "description": "<p>The field name attribute / schema key.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm."
  },
  "AutoForm.getTemplateName": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 161,
    "longname": "AutoForm.getTemplateName",
    "memberof": "AutoForm",
    "name": "getTemplateName",
    "params": [
      {
        "name": "templateType",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "templateName",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "fieldName",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Pass <code>true</code> to return a template name even if that template hasn't been defined.</p>",
        "name": "skipExistsCheck",
        "optional": true,
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Template name</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the full template name. In the simplest scenario, this is templateType_templateName\nas passed in. However, if templateName is not provided, it is looked up in the following\nmanner:\n\n1. autoform.<componentType>.template from the schema (field+type override for all forms)\n2. autoform.template from the schema (field override for all forms)\n3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)\n4. template attribute on an ancestor component within the same form (form specificity for all types and fields)\n5. Default template for component type, as set by AutoForm.setDefaultTemplateForType\n6. Default template, as set by AutoForm.setDefaultTemplate.\n7. Built-in default template, currently bootstrap-3."
  },
  "AutoForm.getValidationContext": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 644,
    "longname": "AutoForm.getValidationContext",
    "memberof": "AutoForm",
    "name": "getValidationContext",
    "params": [
      {
        "description": "<p>The <code>id</code> attribute of the <code>autoForm</code> for which you want the validation context</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The SimpleSchema validation context object.</p>",
        "type": {
          "names": [
            "SimpleSchemaValidationContext"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Use this method to get the validation context, which can be used to check\nthe current invalid fields, manually invalidate fields, etc."
  },
  "AutoForm.hooks": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 43,
    "longname": "AutoForm.hooks",
    "memberof": "AutoForm",
    "name": "hooks",
    "params": [
      {
        "name": "hooks",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Defines hooks by form id. Extends hooks lists if called multiple times for the same\nform."
  },
  "AutoForm.parseData": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 996,
    "longname": "AutoForm.parseData",
    "memberof": "AutoForm",
    "name": "parseData",
    "params": [
      {
        "description": "<p>Current data context for the form, or an empty object. Usually this is used from a quickForm, since the autoForm won't be rendered yet. Otherwise you should use AutoForm.getCurrentDataForForm if you can.</p>",
        "name": "data",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Current data context for the form, or an empty object.</p>",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Parses and alters the current data context for a form. It will have default values added and a `_resolvedSchema` property that has the schema the form should use."
  },
  "AutoForm.selectFirstInvalidField": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 1093,
    "longname": "AutoForm.selectFirstInvalidField",
    "memberof": "AutoForm",
    "name": "selectFirstInvalidField",
    "params": [
      {
        "description": "<p>The <code>id</code> attribute of the form</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The SimpleSchema instance that was used to create the form's validation context.</p>",
        "name": "ss",
        "type": {
          "names": [
            "SimpleSchema"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Selects the focus the first field (in DOM order) with an error."
  },
  "AutoForm.templateInstanceForForm": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 923,
    "longname": "AutoForm.templateInstanceForForm",
    "memberof": "AutoForm",
    "name": "templateInstanceForForm",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute</p>",
        "name": "formId",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The template instance.</p>",
        "type": {
          "names": [
            "TemplateInstance",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the template instance for the form with formId or the closest form to the current context."
  },
  "AutoForm.validateField": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 593,
    "longname": "AutoForm.validateField",
    "memberof": "AutoForm",
    "name": "validateField",
    "params": [
      {
        "description": "<p>The <code>id</code> attribute of the <code>autoForm</code> you want to validate.</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The name of the field within the <code>autoForm</code> you want to validate.</p>",
        "name": "fieldName",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "defaultvalue": false,
        "description": "<p>Set to <code>true</code> to skip validation if the field has no value. Useful for preventing <code>required</code> errors in form fields that the user has not yet filled out.</p>",
        "name": "skipEmpty",
        "optional": true,
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Is it valid?</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "In addition to returning a boolean that indicates whether the field is currently valid,\nthis method causes the reactive validation messages to appear."
  },
  "AutoForm.validateForm": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 608,
    "longname": "AutoForm.validateForm",
    "memberof": "AutoForm",
    "name": "validateForm",
    "params": [
      {
        "description": "<p>The <code>id</code> attribute of the <code>autoForm</code> you want to validate.</p>",
        "name": "formId",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Is it valid?</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "In addition to returning a boolean that indicates whether the form is currently valid,\nthis method causes the reactive validation messages to appear."
  },
  "AutoForm.viewForForm": {
    "access": "public",
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-autoform/client/autoform-api.js",
    "kind": "function",
    "lineno": 939,
    "longname": "AutoForm.viewForForm",
    "memberof": "AutoForm",
    "name": "viewForForm",
    "params": [
      {
        "description": "<p>The form's <code>id</code> attribute. Do not pass this if calling from within a form context.</p>",
        "name": "formId",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The <code>Blaze.View</code> instance for the autoForm.</p>",
        "type": {
          "names": [
            "Blaze.View",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the `Blaze.View` instance for the form with formId or the closest form to the current context."
  },
  "Collaboration.addAdministrator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addAdministrator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 137,
    "locus": "Anywhere",
    "longname": "Collaboration.addAdministrator",
    "memberof": "Collaboration",
    "name": "addAdministrator",
    "scope": "static",
    "summary": "Adds an administrator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.addAdministrators": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addAdministrators('janedoe@test.org, johndoe@someplace.org');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 153,
    "locus": "Anywhere",
    "longname": "Collaboration.addAdministrators",
    "memberof": "Collaboration",
    "name": "addAdministrators",
    "scope": "static",
    "summary": "Adds an administrator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.addCollaborator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addCollaborator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 100,
    "locus": "Anywhere",
    "longname": "Collaboration.addCollaborator",
    "memberof": "Collaboration",
    "name": "addCollaborator",
    "scope": "static",
    "summary": "Adds a collaborator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.addCollaborators": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addCollaborators('janedoe@test.org, johndoe@someplace.org');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 116,
    "locus": "Anywhere",
    "longname": "Collaboration.addCollaborators",
    "memberof": "Collaboration",
    "name": "addCollaborators",
    "scope": "static",
    "summary": "Adds a collaborator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.getCollaborators": {
    "examples": [
      "```\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getNames('janedoe@test.org')\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "function",
    "lineno": 402,
    "locus": "Anywhere",
    "longname": "Collaboration.getCollaborators",
    "memberof": "Collaboration",
    "name": "getCollaborators",
    "params": [],
    "scope": "static",
    "since": "clinical:METEOR@1.1.3",
    "summary": "Return the collaborators attached to the current Collaboration as an array."
  },
  "Collaboration.getNames": {
    "deprecated": true,
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getNames('janedoe@test.org')\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 242,
    "locus": "Client",
    "longname": "Collaboration.getNames",
    "memberof": "Collaboration",
    "name": "getNames",
    "scope": "static",
    "summary": "Gets the names of all the",
    "version": "1.2.3"
  },
  "Collaboration.getSelected": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getSelected()\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 38,
    "locus": "Anywhere",
    "longname": "Collaboration.getSelected",
    "memberof": "Collaboration",
    "name": "getSelected",
    "scope": "static",
    "summary": "Scans the DOM and picks up selected values.",
    "version": "1.2.3"
  },
  "Collaboration.getUrl": {
    "deprecated": true,
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getUrl(collaborationName)\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 62,
    "locus": "Anywhere",
    "longname": "Collaboration.getUrl",
    "memberof": "Collaboration",
    "name": "getUrl",
    "scope": "static",
    "summary": "Returns a relative url where a user can get details of the collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.hasApplied": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\nif (collaboration.hasApplied('janedoe@test.org')){\n  // do stuff\n}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 215,
    "locus": "Anywhere",
    "longname": "Collaboration.hasApplied",
    "memberof": "Collaboration",
    "name": "hasApplied",
    "scope": "static",
    "summary": "Determines if user has applied to the Collaboration and is waiting in the requests queue.",
    "version": "1.2.3"
  },
  "Collaboration.hasMember": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\nif (collaboration.hasMember('janedoe@test.org')){\n  // do stuff\n}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 189,
    "locus": "Anywhere",
    "longname": "Collaboration.hasMember",
    "memberof": "Collaboration",
    "name": "hasMember",
    "scope": "static",
    "summary": "Checks if a Collaboration has a particular email address as a collaborator or administrator.",
    "version": "1.2.3"
  },
  "Collaboration.parse": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.parse()\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 17,
    "locus": "Anywhere",
    "longname": "Collaboration.parse",
    "memberof": "Collaboration",
    "name": "parse",
    "scope": "static",
    "summary": "Creates a new collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.removeAdministrator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.removeAdministrator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 173,
    "locus": "Anywhere",
    "longname": "Collaboration.removeAdministrator",
    "memberof": "Collaboration",
    "name": "removeAdministrator",
    "scope": "static",
    "summary": "Removes an administrator from the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.removeCollaborator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.removeCollaborator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 83,
    "locus": "Anywhere",
    "longname": "Collaboration.removeCollaborator",
    "memberof": "Collaboration",
    "name": "removeCollaborator",
    "scope": "static",
    "summary": "Removes the specified collaborator from the Collaboration.",
    "version": "1.2.3"
  },
  "Collaborations.Collaborations": {
    "examples": [
      "```js\nCollaborations = new Meteor.Collection(\"collaborations\");\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/collection.collaborations.js",
    "kind": "class",
    "lineno": 15,
    "locus": "Anywhere",
    "longname": "Collaborations.Collaborations",
    "memberof": "Collaborations",
    "name": "Collaborations",
    "params": [],
    "scope": "static",
    "summary": "Collaborations object defines a Cursor of collaboration records.",
    "version": "1.2.3"
  },
  "Collaborations.create": {
    "examples": [
      "```js\nCollaborations.create({\n      name: \"SampleCollab\",\n      description: \"Lorem ipsum...\",\n      isUnlisted: false,\n      requiresAdministratorApproval: false,\n      collaborators: ['janedoe@test.org'],\n      administrators: ['janedoe@test.org'],\n      invitations: [],\n      requests: []\n    })\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-collaborations/lib/collection.collaborations.js",
    "kind": "member",
    "lineno": 118,
    "locus": "Anywhere",
    "longname": "Collaborations.create",
    "memberof": "Collaborations",
    "name": "create",
    "scope": "static",
    "summary": "Creates a new collaboration.",
    "version": "1.2.3"
  },
  "Entry.{{logoIsDisplayed}}": {
    "examples": [
      "```html\n{{#if logoIsDisplayed}}\n   <div class=\"entryLogo\" style=\"background-image: url('{{logoUrl}}')\"></div>\n{{/if}}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-entry/components/entryPages.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Client",
    "longname": "Entry.{{logoIsDisplayed}}",
    "memberof": "Entry",
    "name": "{{logoIsDisplayed}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines if a block of code should be displayed based on whether the logo is set to be displayed.",
    "version": "1.2.3"
  },
  "Entry.{{logoUrl}}": {
    "examples": [
      "```html\n{{#if logoIsDisplayed}}\n   <div class=\"entryLogo\" style=\"background-image: url('{{logoUrl}}')\"></div>\n{{/if}}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-active-entry/components/entryPages.js",
    "kind": "member",
    "lineno": 26,
    "locus": "Client",
    "longname": "Entry.{{logoUrl}}",
    "memberof": "Entry",
    "name": "{{logoUrl}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retruns the Url of the logo asset.",
    "version": "1.2.3"
  },
  "Env.allow": {
    "examples": [
      "```js\nEnv.allow({\n  DEBUG: true,\n  NODE_ENV: true\n}});\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-env/lib/clinical-env-server.js",
    "kind": "member",
    "lineno": 74,
    "locus": "Server",
    "longname": "Env.allow",
    "memberof": "Env",
    "name": "allow",
    "scope": "static",
    "summary": "Exposes server environment variables on the client.",
    "version": "1.2.3"
  },
  "Env.variable": {
    "examples": [
      "```js\nif(Env.variable('DEBUG')){\n  console.log('debug message');\n}\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-env/lib/clinical-env-client.js",
    "kind": "member",
    "lineno": 11,
    "locus": "Client",
    "longname": "Env.variable",
    "memberof": "Env",
    "name": "variable",
    "scope": "static",
    "summary": "Detects if a specific environment variable was exposed from the server.",
    "version": "1.2.3"
  },
  "FormBuilder.add": {
    "deprecated": true,
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-form-builder/lib/FormBuilder.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Client",
    "longname": "FormBuilder.add",
    "memberof": "FormBuilder",
    "name": "add",
    "params": [
      {
        "name": "blockType"
      },
      {
        "name": "question"
      }
    ],
    "scope": "static",
    "summary": "Adds a section block to a form schema currently being built."
  },
  "FormBuilder.addQuestion": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-form-builder/lib/FormBuilder.js",
    "kind": "member",
    "lineno": 17,
    "locus": "Client",
    "longname": "FormBuilder.addQuestion",
    "memberof": "FormBuilder",
    "name": "addQuestion",
    "params": [
      {
        "name": "question"
      }
    ],
    "scope": "static",
    "summary": "Adds a section block to a form schema currently being built."
  },
  "FormBuilder.save": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-form-builder/lib/FormBuilder.js",
    "kind": "member",
    "lineno": 200,
    "locus": "Client",
    "longname": "FormBuilder.save",
    "memberof": "FormBuilder",
    "name": "save",
    "params": [
      {
        "name": "question"
      }
    ],
    "scope": "static",
    "summary": "Save a form to the metadata collection."
  },
  "HipaaLogger.logEvent": {
    "examples": [
      "```js\nvar hipaaEvent = {\n  eventType: \"modified\",\n  userId: Meteor.userId(),\n  userName: Meteor.user().profile.fullName,\n  collectionName: \"Medications\",\n  recordId: Random.id(),\n  patientId: Session.get('currentPatientId'),\n  patientName: Session.get('currentPatientName')\n};\nHipaaLogger.logEvent(hipaaEvent);\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-hipaa-audit-log/lib/HipaaLogger.js",
    "kind": "member",
    "lineno": 17,
    "locus": "Client",
    "longname": "HipaaLogger.logEvent",
    "memberof": "HipaaLogger",
    "name": "logEvent",
    "params": [
      {
        "name": "hipaaEvent.eventType"
      },
      {
        "name": "hipaaEvent.userId"
      },
      {
        "name": "hipaaEvent.userName"
      },
      {
        "name": "hipaaEvent.collectionName"
      },
      {
        "name": "hipaaEvent.recordId"
      },
      {
        "name": "hipaaEvent.patientId"
      },
      {
        "name": "hipaaEvent.patientName"
      },
      {
        "name": "hipaaEvent.message"
      }
    ],
    "scope": "static",
    "summary": "Detects if a specific environment variable was exposed from the server.",
    "version": "1.2.3"
  },
  "Mongo.Collection.drop": {
    "examples": [
      "```js\n  todos = new Mongo('todos');\n  todo.insert({name: \"Butter\"})\n  todo.insert({name: \"Eggs\"})\n  todo.insert({name: \"Kale\"})\n  todos.drop();\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-extended-api/server/collection-extended-api.js",
    "kind": "member",
    "lineno": 1,
    "locus": "Server",
    "longname": "Mongo.Collection.drop",
    "memberof": "Mongo.Collection",
    "name": "drop",
    "scope": "static",
    "summary": "Toggles a boolean session variable true/false.",
    "version": "1.2.3"
  },
  "Roles.addUsersToRoles": {
    "examples": [
      "Roles.addUsersToRoles(userId, 'admin')\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n    Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 114,
    "longname": "Roles.addUsersToRoles",
    "memberof": "Roles",
    "name": "addUsersToRoles",
    "params": [
      {
        "description": "<p>User id(s) or object(s) with an _id field</p>",
        "name": "users",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Name(s) of roles/permissions to add users to</p>",
        "name": "roles",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional group name. If supplied, roles will be\n                        specific to that group.\n                        Group names can not start with a '$' or contain\n                        null characters.  Periods in names '.' are\n                        automatically converted to underscores.\n                        The special group Roles.GLOBAL_GROUP provides\n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the\n                        Roles.GLOBAL_GROUP group will be automatically\n                        included in checks for any group.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Add users to roles. Will create roles as needed.\n\nNOTE: Mixing grouped and non-grouped roles for the same user\n      is not supported and will throw an error.\n\nMakes 2 calls to database:\n 1. retrieve list of all existing roles\n 2. update users' roles"
  },
  "Roles.createRole": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 55,
    "longname": "Roles.createRole",
    "memberof": "Roles",
    "name": "createRole",
    "params": [
      {
        "description": "<p>Name of role</p>",
        "name": "role",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>id of new role</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Create a new role. Whitespace will be trimmed."
  },
  "Roles.deleteRole": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 89,
    "longname": "Roles.deleteRole",
    "memberof": "Roles",
    "name": "deleteRole",
    "params": [
      {
        "description": "<p>Name of role</p>",
        "name": "role",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Delete an existing role.  Will throw \"Role in use\" error if any users\nare currently assigned to the target role."
  },
  "Roles.getAllRoles": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 415,
    "longname": "Roles.getAllRoles",
    "memberof": "Roles",
    "name": "getAllRoles",
    "params": [],
    "returns": [
      {
        "description": "<p>cursor of existing roles</p>",
        "type": {
          "names": [
            "Cursor"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve set of all existing roles"
  },
  "Roles.getGroupsForUser": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 494,
    "longname": "Roles.getGroupsForUser",
    "memberof": "Roles",
    "name": "getGroupsForUser",
    "params": [
      {
        "description": "<p>User Id or actual user object</p>",
        "name": "user",
        "type": {
          "names": [
            "String",
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional name of roles to restrict groups to.</p>",
        "name": "role",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted</p>",
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve users groups, if any"
  },
  "Roles.getRolesForUser": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 372,
    "longname": "Roles.getRolesForUser",
    "memberof": "Roles",
    "name": "getRolesForUser",
    "params": [
      {
        "description": "<p>User Id or actual user object</p>",
        "name": "user",
        "type": {
          "names": [
            "String",
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional name of group to restrict roles to.\n                        User's Roles.GLOBAL_GROUP will also be included.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Array of user's roles, unsorted.</p>",
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve users roles"
  },
  "Roles.getUsersInRole": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 426,
    "longname": "Roles.getUsersInRole",
    "memberof": "Roles",
    "name": "getUsersInRole",
    "params": [
      {
        "description": "<p>Name of role/permission.  If array, users\n                           returned will have at least one of the roles\n                           specified but need not have <em>all</em> roles.</p>",
        "name": "role",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional name of group to restrict roles to.\n                        User's Roles.GLOBAL_GROUP will also be checked.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional options which are passed directly\n                          through to <code>Meteor.users.find(query, options)</code></p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>cursor of users in role</p>",
        "type": {
          "names": [
            "Cursor"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve all users who are in target role.\n\nNOTE: This is an expensive query; it performs a full collection scan\non the users collection since there is no index set on the 'roles' field.\nThis is by design as most queries will specify an _id so the _id index is\nused automatically."
  },
  "Roles.removeUsersFromRoles": {
    "examples": [
      "Roles.removeUsersFromRoles(users.bob, 'admin')\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])\n    Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 181,
    "longname": "Roles.removeUsersFromRoles",
    "memberof": "Roles",
    "name": "removeUsersFromRoles",
    "params": [
      {
        "description": "<p>User id(s) or object(s) with an _id field</p>",
        "name": "users",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Name(s) of roles to add users to</p>",
        "name": "roles",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional. Group name. If supplied, only that\n                        group will have roles removed.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Remove users from roles"
  },
  "Roles.setUserRoles": {
    "examples": [
      "Roles.setUserRoles(userId, 'admin')\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n    Roles.setUserRoles([user1, user2], ['user','editor'])\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n    Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 151,
    "longname": "Roles.setUserRoles",
    "memberof": "Roles",
    "name": "setUserRoles",
    "params": [
      {
        "description": "<p>User id(s) or object(s) with an _id field</p>",
        "name": "users",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Name(s) of roles/permissions to add users to</p>",
        "name": "roles",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional group name. If supplied, roles will be\n                        specific to that group.\n                        Group names can not start with '$'.\n                        Periods in names '.' are automatically converted\n                        to underscores.\n                        The special group Roles.GLOBAL_GROUP provides\n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the\n                        Roles.GLOBAL_GROUP group will be automatically\n                        included in checks for any group.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Set a users roles/permissions."
  },
  "Roles.userIsInRole": {
    "examples": [
      "// non-group usage\n    Roles.userIsInRole(user, 'admin')\n    Roles.userIsInRole(user, ['admin','editor'])\n    Roles.userIsInRole(userId, 'admin')\n    Roles.userIsInRole(userId, ['admin','editor'])\n\n    // per-group usage\n    Roles.userIsInRole(user,   ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)\n\n    // this format can also be used as short-hand for Roles.GLOBAL_GROUP\n    Roles.userIsInRole(user, 'admin')"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "function",
    "lineno": 259,
    "longname": "Roles.userIsInRole",
    "memberof": "Roles",
    "name": "userIsInRole",
    "params": [
      {
        "description": "<p>User Id or actual user object</p>",
        "name": "user",
        "type": {
          "names": [
            "String",
            "Object"
          ]
        }
      },
      {
        "description": "<p>Name of role/permission or Array of\n                           roles/permissions to check against.  If array,\n                           will return true if user is in <em>any</em> role.</p>",
        "name": "roles",
        "type": {
          "names": [
            "String",
            "Array"
          ]
        }
      },
      {
        "description": "<p>Optional. Name of group.  If supplied, limits check\n                        to just that group.\n                        The user's Roles.GLOBAL_GROUP will always be checked\n                        whether group is specified or not.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>true if user is in <em>any</em> of the target roles</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Check if user has specified permissions/roles"
  },
  "Router.go": {
    "examples": [
      "```js\nRouter.go('/path/to/page'});\nRouter.go('itemsShowRoute', {_id: 5}, {hash: 'frag', query: 'string});\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-router/lib/router_client.js",
    "kind": "member",
    "lineno": 227,
    "locus": "Client",
    "longname": "Router.go",
    "memberof": "Router",
    "name": "go",
    "scope": "static",
    "summary": "Instructs the client browswer to route to a new Url page.",
    "version": "1.2.3"
  },
  "Router.route": {
    "examples": [
      "```js\nRouter.route('/landing/page', {\n  name: \"landingPageRoute\",\n  template: \"marketingPage\"\n}});\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-router/lib/router.js",
    "kind": "member",
    "lineno": 95,
    "locus": "Client",
    "longname": "Router.route",
    "memberof": "Router",
    "name": "route",
    "scope": "static",
    "summary": "Instructs the client browswer to route to a new Url page.",
    "version": "1.2.3"
  },
  "SchemaHydrator.dehydrate": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 125,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.dehydrate",
    "memberof": "SchemaHydrator",
    "name": "dehydrate",
    "returns": [
      {
        "type": {
          "names": [
            "JSON"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Converts a SimpleSchema object into a JSON object which can be stored in Mongo.  Loses any functions or methods associated with the Schema.",
    "version": "1.2.3"
  },
  "SchemaHydrator.hydrate": {
    "examples": [
      "```js\nvar Foo = new Collection('foo');\nFoo.attachSchema(SchemaHydrator.hydrate(Metadata.findOne({name: \"AcmeWidgetSchema\"})))\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.hydrate",
    "memberof": "SchemaHydrator",
    "name": "hydrate",
    "returns": [
      {
        "type": {
          "names": [
            "SimpleSchema"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Converts a JSON object into a SimpleSchema object.",
    "version": "1.2.3"
  },
  "SchemaHydrator.hydratePartialSchema": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 75,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.hydratePartialSchema",
    "memberof": "SchemaHydrator",
    "name": "hydratePartialSchema",
    "returns": [
      {
        "type": {
          "names": [
            "JSON"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Converts a JSON object representing a schena object into a proper SimpleSchema.  Used in the FormBuilder API.",
    "version": "1.2.3"
  },
  "Session.clear": {
    "examples": [
      "```js\n  Session.clear('activePatient');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-extended-api/client/session-extended-api.js",
    "kind": "member",
    "lineno": 26,
    "locus": "Client",
    "longname": "Session.clear",
    "memberof": "Session",
    "name": "clear",
    "scope": "static",
    "summary": "Clears a session variable.",
    "version": "1.2.3"
  },
  "Session.toggle": {
    "examples": [
      "```js\n  Session.toggle('isSidebarVisible');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-extended-api/client/session-extended-api.js",
    "kind": "member",
    "lineno": 1,
    "locus": "Client",
    "longname": "Session.toggle",
    "memberof": "Session",
    "name": "toggle",
    "scope": "static",
    "summary": "Toggles a boolean session variable true/false.",
    "version": "1.2.3"
  },
  "String.addUnderscores": {
    "examples": [
      "```js\nvar foo = \"Quick brown fox\".addUnderscores();\n})\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-extended-api/lib/String.extensions.js",
    "kind": "member",
    "lineno": 1,
    "locus": "Anywhere",
    "longname": "String.addUnderscores",
    "memberof": "String",
    "name": "addUnderscores",
    "scope": "static",
    "summary": "Replaces spaces in a string with underscores.",
    "version": "1.2.3"
  },
  "Style.parse": {
    "examples": [
      "Template.foo.helpers({\n  getPageWidth: function(){\n    return Style.parse({\n      \"width\": \"80%\",\n      \"padding-left\": \"80%\",\n      \"padding-right\": \"80%\"\n    });\n  }\n});"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-extended-api/lib/Style.js",
    "kind": "member",
    "lineno": 4,
    "locus": "Anywhere",
    "longname": "Style.parse",
    "memberof": "Style",
    "name": "parse",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Serializes a json object into a text string."
  },
  "User": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "class",
    "lineno": 1,
    "longname": "User",
    "name": "User",
    "params": [
      {
        "description": "<p>An object representing a conversation ususally a Mongo document</p>",
        "name": "document",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "global",
    "summary": "Represents a User"
  },
  "User./testGetCollaborations": {
    "examples": [
      "```js\nMeteor.call('testGetCollaborations');\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 272,
    "locus": "Server",
    "longname": "User./testGetCollaborations",
    "memberof": "User",
    "name": "/testGetCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Write all the User collaborations to the server console log.",
    "version": "1.2.3"
  },
  "User.defaultEmail": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.defaultEmail());\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 217,
    "longname": "User.defaultEmail",
    "memberof": "User",
    "name": "defaultEmail",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the default email that an account is associated.  Defined as the first verified email in the emails array.",
    "version": "1.2.3"
  },
  "User.displayName": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.displayName());\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 16,
    "longname": "User.displayName",
    "memberof": "User",
    "name": "displayName",
    "returns": [
      {
        "description": "<p>A name representation of the user account</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "The personal name of the user account.",
    "version": "1.2.3"
  },
  "User.fullName": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.fullName());\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 197,
    "longname": "User.fullName",
    "memberof": "User",
    "name": "fullName",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the full name of the user.",
    "version": "1.2.3"
  },
  "User.getAllCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nselectedUser.getAllCollaborations().forEach(function(collaborationName){\n  console.log(collaborationName);\n});\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 299,
    "locus": "Server",
    "longname": "User.getAllCollaborations",
    "memberof": "User",
    "name": "getAllCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Parses the collaborations graph, and returns a list of all collaborations that a user has reciprical access to.  Uses a transitive closure algorithm to walk the collaboration graph.",
    "version": "1.2.3"
  },
  "User.getCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nselectedUser.getCollaborations().forEach(function(collaboration){\n  console.log(collaboration.name);\n});\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 140,
    "longname": "User.getCollaborations",
    "memberof": "User",
    "name": "getCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets an array of all the collaborations that a user is associated with.",
    "version": "1.2.3"
  },
  "User.hasNoCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nif(selectedUser.hasNoCollaborations()){\n  Router.go('/path/to/collaboration/signup');\n};\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 91,
    "longname": "User.hasNoCollaborations",
    "memberof": "User",
    "name": "hasNoCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Whether the person is associated with a collaboration or a new user.",
    "version": "1.2.3"
  },
  "User.isMemberOfAnyCollaboration": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nif(selectedUser.isMemberOfAnyCollaboration()){\n  Hipaa.logEntry('A team collaborator did something that requires logging.')\n} else {\n  Router.go('/path/to/collaboration/signup');\n};\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 67,
    "longname": "User.isMemberOfAnyCollaboration",
    "memberof": "User",
    "name": "isMemberOfAnyCollaboration",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Whether the person is associated with a collaboration.  Helps in determining if an account is newly created, a patient, research subject, or member of a clinical collaboration.  An account that is a member of a collaboration will typically have more access, but will have regulatory oversite and auditing (i.e. subject to HIPAA tracking and auditing).",
    "version": "1.2.3"
  },
  "User.isMemberOfCollaboration": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nif(selectedUser.hasNoCollaborations()){\n  Router.go('/path/to/collaboration/signup');\n};\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 113,
    "longname": "User.isMemberOfCollaboration",
    "memberof": "User",
    "name": "isMemberOfCollaboration",
    "params": [
      {
        "description": "<p>The MongoId of the collaboration.</p>",
        "name": "collaborationId"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines if a user is associated with a specific collaboration.",
    "version": "1.2.3"
  },
  "User.isSelf": {
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 50,
    "longname": "User.isSelf",
    "memberof": "User",
    "name": "isSelf",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Check if the this user is the current logged in user or the specified user.",
    "version": "1.2.3"
  },
  "User.syncCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nselectedUser.syncCollaborations();\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 352,
    "locus": "Anywhere",
    "longname": "User.syncCollaborations",
    "memberof": "User",
    "name": "syncCollaborations",
    "scope": "static",
    "summary": "Makes sure the user account is synchronized with the current User model.  Basically a save() function for collaborations.",
    "version": "1.2.3"
  },
  "User.{{fullName}}": {
    "examples": [
      "```html\n<div>{{fullName}}</div>\n```"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-user-model/client/template.helpers.js",
    "kind": "member",
    "lineno": 1,
    "longname": "User.{{fullName}}",
    "memberof": "User",
    "name": "{{fullName}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the full name of the user.",
    "version": "1.2.3"
  },
  "module:Roles.GLOBAL_GROUP": {
    "examples": [
      "Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)\n    Roles.userIsInRole(user, 'admin') // => true\n\n    Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)\n    Roles.userIsInRole(user, 'support-staff') // => true\n    Roles.userIsInRole(user, 'admin') // => false"
    ],
    "filepath": "https://github.com/username/myproject/tree/master/packages/clinical-roles/roles/roles_common.js",
    "kind": "member",
    "lineno": 52,
    "longname": "module:Roles.GLOBAL_GROUP",
    "memberof": "module:Roles",
    "name": "GLOBAL_GROUP",
    "properties": [
      {
        "name": "GLOBAL_GROUP"
      }
    ],
    "readonly": true,
    "scope": "static",
    "summary": "Constant used to reference the special 'global' group that\ncan be used to apply blanket permissions across all groups.",
    "type": {
      "names": [
        "String"
      ]
    }
  }
};