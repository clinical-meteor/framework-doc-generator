// This file is automatically generated by meteor-jsdoc. Regenerate it with 'meteor-jsdoc build'
DocsData = {
  "// 2": {
    "description": "<p>// 1</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "namespace",
    "lineno": 37,
    "longname": "// 2",
    "name": "// 2",
    "scope": "global",
    "summary": "Namespace for EJSON functions                                                                            // 3"
  },
  "// 520": {
    "description": "<p>// 508</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3730,
    "locus": "Client                                                                                                       // 519",
    "longname": "// 520",
    "name": "// 520",
    "params": [],
    "scope": "global",
    "summary": "// 509\n                                                                                                                    // 510\n- Inside an `onCreated`, `onRendered`, or `onDestroyed` callback, returns                                           // 511\nthe data context of the template.                                                                                   // 512\n- Inside an event handler, returns the data context of the template on which                                        // 513\nthis event handler was defined.                                                                                     // 514\n- Inside a helper, returns the data context of the DOM node where the helper                                        // 515\nwas used.                                                                                                           // 516\n                                                                                                                    // 517\nEstablishes a reactive dependency on the result.                                                                    // 518"
  },
  "// 527": {
    "description": "<p>// 524</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3746,
    "locus": "Client                                                                                                       // 526",
    "longname": "// 527",
    "name": "// 527",
    "params": [
      {
        "description": "<p>The number of levels beyond the current data context to look. Defaults to 1.           // 528</p>",
        "name": "numLevels",
        "optional": true,
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "scope": "global",
    "summary": "Accesses other data contexts that enclose the current data context.                                        // 525"
  },
  "// 535": {
    "description": "<p>// 532</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3754,
    "locus": "Client                                                                                                       // 534",
    "longname": "// 535",
    "name": "// 535",
    "params": [
      {
        "description": "<p>The name of the helper function you are defining.                                              // 536</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The helper function itself.                                                              // 537</p>",
        "name": "function",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "global",
    "summary": "Defines a [helper function](#template_helpers) which can be used from all templates.                       // 533"
  },
  "// 6": {
    "description": "<p>// 4</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "namespace",
    "lineno": 89,
    "longname": "// 6",
    "name": "// 6",
    "scope": "global",
    "summary": "Namespace for MongoDB-related items                                                                       // 5"
  },
  "<anonymous>~Blaze.Each": {
    "description": "<p>// 102</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2721,
    "locus": "Client                                                                                                       // 104",
    "longname": "<anonymous>~Blaze.Each",
    "memberof": "<anonymous>~Blaze",
    "name": "Each",
    "params": [
      {
        "description": "<p>A function to reactively re-run. The function can                                         // 105\nreturn one of two options:                                                                                          // 106\n                                                                                                                    // 107</p>\n<ol>\n<li>An object with two fields: '_variable' and '_sequence'. Each iterates over                                       // 108\n'_sequence', it may be a Cursor, an array, null, or undefined. Inside the                                         // 109\nEach body you will be able to get the current item from the sequence using                                        // 110\nthe name specified in the '_variable' field.                                                                      // 111<pre class=\"prettyprint source\"><code>                                                                                                             // 112</code></pre></li>\n<li>Just a sequence (Cursor, array, null, or undefined) not wrapped into an                                          // 113\nobject. Inside the Each body, the current item will be set as the data                                            // 114\ncontext.                                                                                                          // 115</li>\n</ol>",
        "name": "argFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A Function that returns  <a href=\"#renderable_content\"><em>renderable                                                 // 116\ncontent</em></a>.                                                                                     // 117</p>",
        "name": "contentFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A Function that returns <a href=\"#renderable_content\"><em>renderable                                                   // 118\ncontent</em></a> to display in the case when there are no items                                       // 119\nin the sequence.                                                                                                    // 120</p>",
        "name": "elseFunc",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructs a View that renders `contentFunc` for each item in a sequence.                                  // 103"
  },
  "<anonymous>~Blaze.If": {
    "description": "<p>// 66</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2672,
    "locus": "Client                                                                                                       // 68",
    "longname": "<anonymous>~Blaze.If",
    "memberof": "<anonymous>~Blaze",
    "name": "If",
    "params": [
      {
        "description": "<p>A function to reactively re-run.  Whether the result is truthy or falsy determines whether <code>contentFunc</code> or <code>elseFunc</code> is shown.  An empty array is considered falsy.</p>",
        "name": "conditionFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.                  // 70</p>",
        "name": "contentFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Optional.  A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.  If no <code>elseFunc</code> is supplied, no content is shown in the &quot;else&quot; case.</p>",
        "name": "elseFunc",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructs a View that renders content conditionally.                                                      // 67"
  },
  "<anonymous>~Blaze.Let": {
    "description": "<p>// 53</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2658,
    "longname": "<anonymous>~Blaze.Let",
    "memberof": "<anonymous>~Blaze",
    "name": "Let",
    "params": [
      {
        "description": "<p>Dictionary mapping names of bindings to                                                  // 55\nvalues or computations to reactively re-run.                                                                        // 56</p>",
        "name": "bindings",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.                  // 57</p>",
        "name": "contentFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructs a View setting the local lexical scope in the block.                                            // 54"
  },
  "<anonymous>~Blaze.Template": {
    "classdesc": "<p>// 10</p>",
    "description": "<p>// 9</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "class",
    "lineno": 3238,
    "locus": "Client                                                                                                       // 12",
    "longname": "<anonymous>~Blaze.Template",
    "memberof": "<anonymous>~Blaze",
    "name": "Template",
    "params": [
      {
        "description": "<p>Optional.  A name for Views constructed by this Template.  See <a href=\"#view_name\"><code>view.name</code></a>.</p>",
        "name": "viewName",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>A function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.  This function is used as the <code>renderFunction</code> for Views constructed by this Template.</p>",
        "name": "renderFunction",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructor for a Template, which is used to construct Views with particular name and content.             // 11"
  },
  "<anonymous>~Blaze.TemplateInstance": {
    "classdesc": "<p>// 225</p>",
    "description": "<p>// 224</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "instancename": "template                                                                                              // 228",
    "kind": "class",
    "lineno": 3452,
    "longname": "<anonymous>~Blaze.TemplateInstance",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance",
    "params": [
      {
        "description": "<p>// 227</p>",
        "name": "view",
        "type": {
          "names": [
            "Blaze.View"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "The class for template instances                                                                           // 226"
  },
  "<anonymous>~Blaze.TemplateInstance#$": {
    "description": "<p>// 282</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3510,
    "locus": "Client                                                                                                       // 284",
    "longname": "<anonymous>~Blaze.TemplateInstance#$",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance#$",
    "params": [
      {
        "description": "<p>The CSS selector to match, scoped to the template contents.                                // 285</p>",
        "name": "selector",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 286</p>",
        "type": {
          "names": [
            "Array.<DOMNode>"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Find all elements matching `selector` in this template instance, and return them as a JQuery object.       // 283"
  },
  "<anonymous>~Blaze.TemplateInstance#autorun": {
    "description": "<p>// 316</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3543,
    "locus": "Client                                                                                                       // 318",
    "longname": "<anonymous>~Blaze.TemplateInstance#autorun",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance#autorun",
    "params": [
      {
        "description": "<p>The function to run. It receives one argument: a Tracker.Computation object.              // 319</p>",
        "name": "runFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "A version of [Tracker.autorun](#tracker_autorun) that is stopped when the template is destroyed.           // 317"
  },
  "<anonymous>~Blaze.TemplateInstance#find": {
    "description": "<p>// 305</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3533,
    "locus": "Client                                                                                                       // 307",
    "longname": "<anonymous>~Blaze.TemplateInstance#find",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance#find",
    "params": [
      {
        "description": "<p>The CSS selector to match, scoped to the template contents.                                // 308</p>",
        "name": "selector",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 309</p>",
        "type": {
          "names": [
            "DOMElement"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Find one element matching `selector` in this template instance.                                            // 306"
  },
  "<anonymous>~Blaze.TemplateInstance#findAll": {
    "description": "<p>// 295</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3523,
    "locus": "Client                                                                                                       // 297",
    "longname": "<anonymous>~Blaze.TemplateInstance#findAll",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance#findAll",
    "params": [
      {
        "description": "<p>The CSS selector to match, scoped to the template contents.                                // 298</p>",
        "name": "selector",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 299</p>",
        "type": {
          "names": [
            "Array.<DOMElement>"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Find all elements matching `selector` in this template instance.                                           // 296"
  },
  "<anonymous>~Blaze.TemplateInstance#subscribe": {
    "arg1, arg2": [
      {
        "description": "<p>Optional arguments passed to publisher function                                         // 335\non server.                                                                                                          // 336</p>",
        "name": "..",
        "optional": true,
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "description": "<p>// 325</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3566,
    "locus": "Client                                                                                                       // 332",
    "longname": "<anonymous>~Blaze.TemplateInstance#subscribe",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance#subscribe",
    "options": [
      {
        "description": "<p>Passed to <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>.                              // 339</p>",
        "name": "onReady",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Passed to <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>.                               // 340</p>",
        "name": "onStop",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>The connection on which to make the                                    // 341\nsubscription.                                                                                                       // 342</p>",
        "name": "connection",
        "optional": true,
        "type": {
          "names": [
            "DDP.Connection"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>Name of the subscription.  Matches the name of the                                             // 333\nserver's <code>publish()</code> call.                                                                                          // 334</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>If a function is passed instead of an                                            // 337\nobject, it is interpreted as an <code>onReady</code> callback.                                                                 // 338</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "function",
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>The subscription handle to the newly made                                              // 328\nsubscription. Call <code>handle.stop()</code> to manually stop the subscription, or                                            // 329\n<code>handle.ready()</code> to find out if this particular subscription has loaded all                                         // 330\nof its inital data.                                                                                                 // 331</p>",
        "type": {
          "names": [
            "SubscriptionHandle"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "A version of [Meteor.subscribe](#meteor_subscribe) that is stopped                                         // 326\nwhen the template is destroyed.                                                                                     // 327"
  },
  "<anonymous>~Blaze.TemplateInstance#subscriptionsReady": {
    "description": "<p>// 418</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3646,
    "longname": "<anonymous>~Blaze.TemplateInstance#subscriptionsReady",
    "memberof": "<anonymous>~Blaze",
    "name": "TemplateInstance#subscriptionsReady",
    "params": [],
    "returns": [
      {
        "description": "<p>True if all subscriptions on this template instance are                                           // 421\nready.                                                                                                              // 422</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "A reactive function that returns true when all of the subscriptions                                        // 419\ncalled with [this.subscribe](#TemplateInstance-subscribe) are ready.                                                // 420"
  },
  "<anonymous>~Blaze.Unless": {
    "description": "<p>// 91</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2697,
    "locus": "Client                                                                                                       // 93",
    "longname": "<anonymous>~Blaze.Unless",
    "memberof": "<anonymous>~Blaze",
    "name": "Unless",
    "params": [
      {
        "description": "<p>A function to reactively re-run.  If the result is falsy, <code>contentFunc</code> is shown, otherwise <code>elseFunc</code> is shown.  An empty array is considered falsy.</p>",
        "name": "conditionFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.                  // 95</p>",
        "name": "contentFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Optional.  A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.  If no <code>elseFunc</code> is supplied, no content is shown in the &quot;else&quot; case.</p>",
        "name": "elseFunc",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "An inverted [`Blaze.If`](#blaze_if).                                                                       // 92"
  },
  "<anonymous>~Blaze.View": {
    "classdesc": "<p>// 37</p>",
    "description": "<p>// 36</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "class",
    "lineno": 1724,
    "locus": "Client                                                                                                       // 39",
    "longname": "<anonymous>~Blaze.View",
    "memberof": "<anonymous>~Blaze",
    "name": "View",
    "params": [
      {
        "description": "<p>Optional.  A name for this type of View.  See <a href=\"#view_name\"><code>view.name</code></a>.                     // 40</p>",
        "name": "name",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>A function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.  In this function, <code>this</code> is bound to the View.</p>",
        "name": "renderFunction",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructor for a View, which represents a reactive region of DOM.                                         // 38"
  },
  "<anonymous>~Blaze.With": {
    "description": "<p>// 7</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2612,
    "locus": "Client                                                                                                       // 9",
    "longname": "<anonymous>~Blaze.With",
    "memberof": "<anonymous>~Blaze",
    "name": "With",
    "params": [
      {
        "description": "<p>An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.</p>",
        "name": "data",
        "type": {
          "names": [
            "Object",
            "function"
          ]
        }
      },
      {
        "description": "<p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.                  // 11</p>",
        "name": "contentFunc",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructs a View that renders content with a data context.                                                // 8"
  },
  "<anonymous>~Blaze.currentView": {
    "description": "<p>// 527</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 2213,
    "locus": "Client                                                                                                       // 529",
    "longname": "<anonymous>~Blaze.currentView",
    "memberof": "<anonymous>~Blaze",
    "name": "currentView",
    "scope": "static",
    "summary": "The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.",
    "type": {
      "names": [
        "Blaze.View"
      ]
    }
  },
  "<anonymous>~Blaze.getData": {
    "description": "<p>// 738</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2424,
    "locus": "Client                                                                                                       // 740",
    "longname": "<anonymous>~Blaze.getData",
    "memberof": "<anonymous>~Blaze",
    "name": "getData",
    "params": [
      {
        "description": "<p>Optional.  An element that was rendered by a Meteor, or a View.      // 741</p>",
        "name": "elementOrView",
        "optional": true,
        "type": {
          "names": [
            "DOMElement",
            "Blaze.View"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template."
  },
  "<anonymous>~Blaze.getView": {
    "description": "<p>// 776</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2462,
    "locus": "Client                                                                                                       // 778",
    "longname": "<anonymous>~Blaze.getView",
    "memberof": "<anonymous>~Blaze",
    "name": "getView",
    "params": [
      {
        "description": "<p>Optional.  If specified, the View enclosing <code>element</code> is returned.                    // 779</p>",
        "name": "element",
        "optional": true,
        "type": {
          "names": [
            "DOMElement"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets either the current View, or the View enclosing the given DOM element.                                 // 777"
  },
  "<anonymous>~Blaze.isTemplate": {
    "description": "<p>// 56</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3283,
    "locus": "Client                                                                                                       // 58",
    "longname": "<anonymous>~Blaze.isTemplate",
    "memberof": "<anonymous>~Blaze",
    "name": "isTemplate",
    "params": [
      {
        "description": "<p>The value to test.                                                                               // 59</p>",
        "name": "value",
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns true if `value` is a template object like `Template.myTemplate`.                                   // 57"
  },
  "<anonymous>~Blaze.remove": {
    "description": "<p>// 672</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2358,
    "locus": "Client                                                                                                       // 674",
    "longname": "<anonymous>~Blaze.remove",
    "memberof": "<anonymous>~Blaze",
    "name": "remove",
    "params": [
      {
        "description": "<p>The return value from <code>Blaze.render</code> or <code>Blaze.renderWithData</code>.                    // 675</p>",
        "name": "renderedView",
        "type": {
          "names": [
            "Blaze.View"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it.             // 673"
  },
  "<anonymous>~Blaze.render": {
    "description": "<p>// 606</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2295,
    "locus": "Client                                                                                                       // 608",
    "longname": "<anonymous>~Blaze.render",
    "memberof": "<anonymous>~Blaze",
    "name": "render",
    "params": [
      {
        "description": "<p>The template (e.g. <code>Template.myTemplate</code>) or View object to render.  If a template, a View object is <a href=\"#template_constructview\">constructed</a>.  If a View, it must be an unrendered View, which becomes a rendered View and is returned.</p>",
        "name": "templateOrView",
        "type": {
          "names": [
            "Template",
            "Blaze.View"
          ]
        }
      },
      {
        "description": "<p>The node that will be the parent of the rendered template.  It must be an Element node.</p>",
        "name": "parentNode",
        "type": {
          "names": [
            "DOMNode"
          ]
        }
      },
      {
        "description": "<p>Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.</p>",
        "name": "nextNode",
        "optional": true,
        "type": {
          "names": [
            "DOMNode"
          ]
        }
      },
      {
        "description": "<p>Optional. If provided, it will be set as the rendered View's <a href=\"#view_parentview\"><code>parentView</code></a>.</p>",
        "name": "parentView",
        "optional": true,
        "type": {
          "names": [
            "Blaze.View"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#blaze_view) which can be passed to [`Blaze.remove`](#blaze_remove)."
  },
  "<anonymous>~Blaze.renderWithData": {
    "description": "<p>// 656</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2346,
    "locus": "Client                                                                                                       // 658",
    "longname": "<anonymous>~Blaze.renderWithData",
    "memberof": "<anonymous>~Blaze",
    "name": "renderWithData",
    "params": [
      {
        "description": "<p>The template (e.g. <code>Template.myTemplate</code>) or View object to render.     // 659</p>",
        "name": "templateOrView",
        "type": {
          "names": [
            "Template",
            "Blaze.View"
          ]
        }
      },
      {
        "description": "<p>The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.</p>",
        "name": "data",
        "type": {
          "names": [
            "Object",
            "function"
          ]
        }
      },
      {
        "description": "<p>The node that will be the parent of the rendered template.  It must be an Element node.</p>",
        "name": "parentNode",
        "type": {
          "names": [
            "DOMNode"
          ]
        }
      },
      {
        "description": "<p>Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.</p>",
        "name": "nextNode",
        "optional": true,
        "type": {
          "names": [
            "DOMNode"
          ]
        }
      },
      {
        "description": "<p>Optional. If provided, it will be set as the rendered View's <a href=\"#view_parentview\"><code>parentView</code></a>.</p>",
        "name": "parentView",
        "optional": true,
        "type": {
          "names": [
            "Blaze.View"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.       // 657"
  },
  "<anonymous>~Blaze.toHTML": {
    "description": "<p>// 693</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2379,
    "locus": "Client                                                                                                       // 695",
    "longname": "<anonymous>~Blaze.toHTML",
    "memberof": "<anonymous>~Blaze",
    "name": "toHTML",
    "params": [
      {
        "description": "<p>The template (e.g. <code>Template.myTemplate</code>) or View object from which to generate HTML.</p>",
        "name": "templateOrView",
        "type": {
          "names": [
            "Template",
            "Blaze.View"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Renders a template or View to a string of HTML.                                                            // 694"
  },
  "<anonymous>~Blaze.toHTMLWithData": {
    "description": "<p>// 704</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 2391,
    "locus": "Client                                                                                                       // 706",
    "longname": "<anonymous>~Blaze.toHTMLWithData",
    "memberof": "<anonymous>~Blaze",
    "name": "toHTMLWithData",
    "params": [
      {
        "description": "<p>The template (e.g. <code>Template.myTemplate</code>) or View object from which to generate HTML.</p>",
        "name": "templateOrView",
        "type": {
          "names": [
            "Template",
            "Blaze.View"
          ]
        }
      },
      {
        "description": "<p>The data context to use, or a function returning a data context.                      // 708</p>",
        "name": "data",
        "type": {
          "names": [
            "Object",
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.            // 705"
  },
  "<anonymous>~DDP.connect": {
    "description": "<p>// 1636</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 4758,
    "locus": "Anywhere                                                                                                // 1638",
    "longname": "<anonymous>~DDP.connect",
    "memberof": "<anonymous>~DDP",
    "name": "connect",
    "params": [
      {
        "description": "<p>The URL of another Meteor application.                                                     // 1639</p>",
        "name": "url",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods."
  },
  "<anonymous>~DDPCommon.MethodInvocation": {
    "description": "<p>// 3</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "instancename": "this                                                                                // 7",
    "kind": "function",
    "lineno": 270,
    "longname": "<anonymous>~DDPCommon.MethodInvocation",
    "memberof": "<anonymous>~DDPCommon",
    "name": "MethodInvocation",
    "params": [
      {
        "description": "<p>// 6</p>",
        "name": "options",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "The state for a single invocation of a method, referenced by this                        // 4\ninside a method definition.                                                                       // 5"
  },
  "<anonymous>~EJSON.addType": {
    "description": "<p>// 66</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 108,
    "locus": "Anywhere                                                                                                   // 68",
    "longname": "<anonymous>~EJSON.addType",
    "memberof": "<anonymous>~EJSON",
    "name": "addType",
    "params": [
      {
        "description": "<p>A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's <code>typeName</code> method.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's <code>toJSONValue</code> method.</p>",
        "name": "factory",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Add a custom datatype to EJSON.                                                                          // 67"
  },
  "<anonymous>~EJSON.clone": {
    "description": "<p>// 457</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 498,
    "locus": "Anywhere                                                                                                   // 459",
    "longname": "<anonymous>~EJSON.clone",
    "memberof": "<anonymous>~EJSON",
    "name": "clone",
    "params": [
      {
        "description": "<p>A value to copy.                                                                               // 460</p>",
        "name": "val",
        "type": {
          "names": [
            "EJSON"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Return a deep copy of `val`.                                                                             // 458"
  },
  "<anonymous>~EJSON.equals": {
    "description": "<p>// 368</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 412,
    "locus": "Anywhere                                                                                                   // 370",
    "longname": "<anonymous>~EJSON.equals",
    "memberof": "<anonymous>~EJSON",
    "name": "equals",
    "options": [
      {
        "description": "<p>Compare in key sensitive order, if supported by the JavaScript implementation.  For example, <code>{a: 1, b: 2}</code> is equal to <code>{b: 2, a: 1}</code> only when <code>keyOrderSensitive</code> is <code>false</code>.  The default is <code>false</code>.</p>",
        "name": "keyOrderSensitive",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>// 371</p>",
        "name": "a",
        "type": {
          "names": [
            "EJSON"
          ]
        }
      },
      {
        "description": "<p>// 372</p>",
        "name": "b",
        "type": {
          "names": [
            "EJSON"
          ]
        }
      },
      {
        "description": "<p>// 373</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison."
  },
  "<anonymous>~EJSON.fromJSONValue": {
    "description": "<p>// 312</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 353,
    "locus": "Anywhere                                                                                                   // 314",
    "longname": "<anonymous>~EJSON.fromJSONValue",
    "memberof": "<anonymous>~EJSON",
    "name": "fromJSONValue",
    "params": [
      {
        "description": "<p>A value to deserialize into EJSON.                                                    // 315</p>",
        "name": "val",
        "type": {
          "names": [
            "JSONCompatible"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Deserialize an EJSON value from its plain JSON representation.                                           // 313"
  },
  "<anonymous>~EJSON.isBinary": {
    "description": "<p>// 358</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 399,
    "locus": "Anywhere                                                                                                   // 361",
    "longname": "<anonymous>~EJSON.isBinary",
    "memberof": "<anonymous>~EJSON",
    "name": "isBinary",
    "params": [
      {
        "description": "<p>The variable to check.                                                                          // 360</p>",
        "name": "x",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary)."
  },
  "<anonymous>~EJSON.newBinary": {
    "description": "<p>// 506</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "member",
    "lineno": 552,
    "locus": "Anywhere                                                                                                   // 508",
    "longname": "<anonymous>~EJSON.newBinary",
    "memberof": "<anonymous>~EJSON",
    "name": "newBinary",
    "params": [
      {
        "description": "<p>The number of bytes of binary data to allocate.                                              // 509</p>",
        "name": "size",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Allocate a new buffer of binary data that EJSON can serialize.                                           // 507"
  },
  "<anonymous>~EJSON.parse": {
    "description": "<p>// 347</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 388,
    "locus": "Anywhere                                                                                                   // 349",
    "longname": "<anonymous>~EJSON.parse",
    "memberof": "<anonymous>~EJSON",
    "name": "parse",
    "params": [
      {
        "description": "<p>A string to parse into an EJSON value.                                                        // 350</p>",
        "name": "str",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.                    // 348"
  },
  "<anonymous>~EJSON.stringify": {
    "description": "<p>// 328</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 374,
    "locus": "Anywhere                                                                                                   // 332",
    "longname": "<anonymous>~EJSON.stringify",
    "memberof": "<anonymous>~EJSON",
    "name": "stringify",
    "options": [
      {
        "description": "<p>Indents objects and arrays for easy readability.  When <code>true</code>, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.</p>",
        "name": "indent",
        "type": {
          "names": [
            "Boolean",
            "Integer",
            "String"
          ]
        }
      },
      {
        "description": "<p>When <code>true</code>, stringifies keys in an object in sorted order.                    // 336</p>",
        "name": "canonical",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>A value to stringify.                                                                          // 333</p>",
        "name": "val",
        "type": {
          "names": [
            "EJSON"
          ]
        }
      },
      {
        "description": "<p>// 334</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Serialize a value to a string.                                                                           // 329\n                                                                                                                     // 330\nFor EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`."
  },
  "<anonymous>~EJSON.toJSONValue": {
    "description": "<p>// 243</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 284,
    "locus": "Anywhere                                                                                                   // 245",
    "longname": "<anonymous>~EJSON.toJSONValue",
    "memberof": "<anonymous>~EJSON",
    "name": "toJSONValue",
    "params": [
      {
        "description": "<p>A value to serialize to plain JSON.                                                            // 246</p>",
        "name": "val",
        "type": {
          "names": [
            "EJSON"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Serialize an EJSON-compatible value into its plain JSON representation.                                  // 244"
  },
  "<anonymous>~Match.test": {
    "description": "<p>// 86</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/check.js",
    "kind": "function",
    "lineno": 120,
    "locus": "Anywhere                                                                                  // 88",
    "longname": "<anonymous>~Match.test",
    "memberof": "<anonymous>~Match",
    "name": "test",
    "params": [
      {
        "description": "<p>The value to check                                                            // 89</p>",
        "name": "value",
        "type": {
          "names": [
            "Any"
          ]
        }
      },
      {
        "description": "<p>The pattern to match <code>value</code> against                               // 90</p>",
        "name": "pattern",
        "type": {
          "names": [
            "MatchPattern"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns true if the value matches the pattern.                                          // 87"
  },
  "<anonymous>~Meteor.Error": {
    "classdesc": "<p>// 48</p>",
    "description": "<p>// 45</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "class",
    "lineno": 588,
    "locus": "Anywhere                                                                                        // 47",
    "longname": "<anonymous>~Meteor.Error",
    "memberof": "<anonymous>~Meteor",
    "name": "Error",
    "params": [
      {
        "description": "<p>A string code uniquely identifying this kind of error.                           // 49\nThis string should be used by callers of the method to determine the                                   // 50\nappropriate action to take, instead of attempting to parse the reason                                  // 51\nor details fields. For example:                                                                        // 52\n                                                                                                       // 53\n<code>// 54\n// on the server, pick a code unique to this error                                                     // 55\n// the reason field should be a useful debug message                                                   // 56\nthrow new Meteor.Error(&quot;logged-out&quot;,                                                                   // 57\n  &quot;The user must be logged in to post a comment.&quot;);                                                    // 58\n                                                                                                       // 59\n// on the client                                                                                       // 60\nMeteor.call(&quot;methodName&quot;, function (error) {                                                           // 61\n  // identify the error                                                                                // 62\n  if (error &amp;&amp; error.error === &quot;logged-out&quot;) {                                                         // 63\n    // show a nice error message                                                                       // 64\n    Session.set(&quot;errorMessage&quot;, &quot;Please log in to post a comment.&quot;);                                   // 65\n  }                                                                                                    // 66\n});                                                                                                    // 67</code>                                                                                                    // 68\n                                                                                                       // 69\nFor legacy reasons, some built-in Meteor functions such as <code>check</code> throw                               // 70\nerrors with a number in this field.                                                                    // 71\n                                                                                                       // 72</p>",
        "name": "error",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional.  A short human-readable summary of the                              // 73\nerror, like 'Not Found'.                                                                               // 74</p>",
        "name": "reason",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional.  Additional information about the error,                           // 75\nlike a textual stack trace.                                                                            // 76</p>",
        "name": "details",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "This class represents a symbolic error thrown by a method.                                    // 46"
  },
  "<anonymous>~Meteor.absoluteUrl": {
    "description": "<p>// 1</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 1041,
    "locus": "Anywhere                                                                                        // 3",
    "longname": "<anonymous>~Meteor.absoluteUrl",
    "memberof": "<anonymous>~Meteor",
    "name": "absoluteUrl",
    "options": [
      {
        "description": "<p>Create an HTTPS URL.                                                   // 6</p>",
        "name": "secure",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.</p>",
        "name": "replaceLocalhost",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>Override the default ROOT_URL from the server environment. For example: &quot;<code>http://foo.example.com</code>&quot;</p>",
        "name": "rootUrl",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>A path to append to the root URL. Do not include a leading &quot;<code>/</code>&quot;.               // 4</p>",
        "name": "path",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>// 5</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`."
  },
  "<anonymous>~Meteor.isClient": {
    "description": "<p>// 7</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "member",
    "lineno": 39,
    "locus": "Anywhere                                                                                      // 9",
    "longname": "<anonymous>~Meteor.isClient",
    "memberof": "<anonymous>~Meteor",
    "name": "isClient",
    "scope": "static",
    "summary": "Boolean variable.  True if running in client environment.                                   // 8",
    "type": {
      "names": [
        "Boolean"
      ]
    }
  },
  "<anonymous>~Meteor.isServer": {
    "description": "<p>// 15</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "member",
    "lineno": 47,
    "locus": "Anywhere                                                                                      // 17",
    "longname": "<anonymous>~Meteor.isServer",
    "memberof": "<anonymous>~Meteor",
    "name": "isServer",
    "scope": "static",
    "summary": "Boolean variable.  True if running in server environment.                                   // 16",
    "type": {
      "names": [
        "Boolean"
      ]
    }
  },
  "<anonymous>~Meteor.release": {
    "description": "<p>// 6</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "member",
    "lineno": 88,
    "locus": "Anywhere                                                                                      // 8",
    "longname": "<anonymous>~Meteor.release",
    "memberof": "<anonymous>~Meteor",
    "name": "release",
    "scope": "static",
    "summary": "`Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.",
    "type": {
      "names": [
        "String"
      ]
    }
  },
  "<anonymous>~Meteor.settings": {
    "description": "<p>// 27</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "member",
    "lineno": 58,
    "locus": "Anywhere                                                                                      // 29",
    "longname": "<anonymous>~Meteor.settings",
    "memberof": "<anonymous>~Meteor",
    "name": "settings",
    "scope": "static",
    "summary": "`Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.",
    "type": {
      "names": [
        "Object"
      ]
    }
  },
  "<anonymous>~Meteor.startup": {
    "description": "<p>// 52</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 804,
    "locus": "Anywhere                                                                                        // 54",
    "longname": "<anonymous>~Meteor.startup",
    "memberof": "<anonymous>~Meteor",
    "name": "startup",
    "params": [
      {
        "description": "<p>A function to run on startup.                                                   // 55</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Run code when a client or a server starts.                                                    // 53"
  },
  "<anonymous>~Mongo.Collection": {
    "classdesc": "<p>// 14</p>",
    "description": "<p>// 10</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "instancename": "collection                                                                                           // 13",
    "kind": "class",
    "lineno": 111,
    "locus": "Anywhere                                                                                                    // 12",
    "longname": "<anonymous>~Mongo.Collection",
    "memberof": "<anonymous>~Mongo",
    "name": "Collection",
    "options": [
      {
        "description": "<p>The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling <a href=\"#ddp_connect\"><code>DDP.connect</code></a> to specify a different server. Pass <code>null</code> to specify no connection. Unmanaged (<code>name</code> is null) collections cannot specify a connection.</p>",
        "name": "connection",
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>The method of generating the <code>_id</code> fields of new documents in this collection.  Possible values:\n                                                                                                                      // 19</p>\n<ul>\n<li><strong><code>'STRING'</code></strong>: random strings                                                                                     // 20</li>\n<li><strong><code>'MONGO'</code></strong>:  random <a href=\"#mongo_object_id\"><code>Mongo.ObjectID</code></a> values                                                 // 21<pre class=\"prettyprint source\"><code>                                                                                                               // 22</code></pre>The default id generation technique is <code>'STRING'</code>.                                                                    // 23</li>\n</ul>",
        "name": "idGeneration",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>An optional transformation function. Documents will be passed through this function before being returned from <code>fetch</code> or <code>findOne</code>, and before being passed to callbacks of <code>observe</code>, <code>map</code>, <code>forEach</code>, <code>allow</code>, and <code>deny</code>. Transforms are <em>not</em> applied for the callbacks of <code>observeChanges</code> or to cursors returned from publish functions.</p>",
        "name": "transform",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>// 16</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Constructor for a Collection                                                                              // 11"
  },
  "<anonymous>~Mongo.Collection#allow": {
    "description": "<p>// 783</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 876,
    "locus": "Server                                                                                                    // 785",
    "longname": "<anonymous>~Mongo.Collection#allow",
    "memberof": "<anonymous>~Mongo",
    "name": "Collection#allow",
    "options": [
      {
        "description": "<p>Functions that look at a proposed modification to the database and return true if it should be allowed.</p>",
        "name": "insert, update, remove",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your <code>update</code> and <code>remove</code> functions.</p>",
        "name": "fetch",
        "type": {
          "names": [
            "Array.<String>"
          ]
        }
      },
      {
        "description": "<p>Overrides <code>transform</code> on the  <a href=\"#collections\"><code>Collection</code></a>.  Pass <code>null</code> to disable transformation.</p>",
        "name": "transform",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>// 786</p>",
        "name": "options",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Allow users to write directly to this collection from client code, subject to limitations you define.   // 784"
  },
  "<anonymous>~Mongo.Collection#deny": {
    "description": "<p>// 795</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 888,
    "locus": "Server                                                                                                    // 797",
    "longname": "<anonymous>~Mongo.Collection#deny",
    "memberof": "<anonymous>~Mongo",
    "name": "Collection#deny",
    "options": [
      {
        "description": "<p>Functions that look at a proposed modification to the database and return true if it should be denied, even if an <a href=\"#allow\">allow</a> rule says otherwise.</p>",
        "name": "insert, update, remove",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your <code>update</code> and <code>remove</code> functions.</p>",
        "name": "fetch",
        "type": {
          "names": [
            "Array.<String>"
          ]
        }
      },
      {
        "description": "<p>Overrides <code>transform</code> on the  <a href=\"#collections\"><code>Collection</code></a>.  Pass <code>null</code> to disable transformation.</p>",
        "name": "transform",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>// 798</p>",
        "name": "options",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Override `allow` rules.                                                                                 // 796"
  },
  "<anonymous>~Mongo.Collection#rawCollection": {
    "description": "<p>// 656</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 745,
    "locus": "Server                                                                                                      // 658",
    "longname": "<anonymous>~Mongo.Collection#rawCollection",
    "memberof": "<anonymous>~Mongo",
    "name": "Collection#rawCollection",
    "params": [],
    "scope": "static",
    "summary": "Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`."
  },
  "<anonymous>~Mongo.Collection#rawDatabase": {
    "description": "<p>// 668</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 757,
    "locus": "Server                                                                                                      // 670",
    "longname": "<anonymous>~Mongo.Collection#rawDatabase",
    "memberof": "<anonymous>~Mongo",
    "name": "Collection#rawDatabase",
    "params": [],
    "scope": "static",
    "summary": "Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`."
  },
  "<anonymous>~Mongo.Collection#upsert": {
    "description": "<p>// 608</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 702,
    "locus": "Anywhere                                                                                                    // 610",
    "longname": "<anonymous>~Mongo.Collection#upsert",
    "memberof": "<anonymous>~Mongo",
    "name": "Collection#upsert",
    "options": [
      {
        "description": "<p>True to modify all matching documents; false to only modify one of the matching documents (the default).</p>",
        "name": "multi",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>Specifies which documents to modify                                                // 611</p>",
        "name": "selector",
        "type": {
          "names": [
            "MongoSelector"
          ]
        }
      },
      {
        "description": "<p>Specifies how to modify the documents                                              // 612</p>",
        "name": "modifier",
        "type": {
          "names": [
            "MongoModifier"
          ]
        }
      },
      {
        "description": "<p>// 613</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.</p>",
        "name": "callback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any)."
  },
  "<anonymous>~Mongo.Cursor": {
    "classdesc": "<p>// 691</p>",
    "description": "<p>// 689</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "instancename": "cursor                                                                                               // 692",
    "kind": "class",
    "lineno": 779,
    "longname": "<anonymous>~Mongo.Cursor",
    "memberof": "<anonymous>~Mongo",
    "name": "Cursor",
    "params": [],
    "scope": "static",
    "summary": "To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            // 690"
  },
  "<anonymous>~Mongo.ObjectID": {
    "classdesc": "<p>// 684</p>",
    "description": "<p>// 681</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "class",
    "lineno": 772,
    "locus": "Anywhere                                                                                                    // 683",
    "longname": "<anonymous>~Mongo.ObjectID",
    "memberof": "<anonymous>~Mongo",
    "name": "ObjectID",
    "params": [
      {
        "description": "<p>Optional.  The 24-character hexadecimal contents of the ObjectID to create             // 685</p>",
        "name": "hexString",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules)."
  },
  "<anonymous>~ReactiveVar#get": {
    "description": "<p>// 58</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/reactive-var.js",
    "kind": "function",
    "lineno": 98,
    "locus": "Client                                                                                                // 60",
    "longname": "<anonymous>~ReactiveVar#get",
    "memberof": "<anonymous>~ReactiveVar",
    "name": "get",
    "params": [],
    "scope": "instance",
    "summary": "Returns the current value of the ReactiveVar, establishing a reactive dependency.                   // 59"
  },
  "<anonymous>~ReactiveVar#set": {
    "description": "<p>// 69</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/reactive-var.js",
    "kind": "function",
    "lineno": 110,
    "locus": "Client                                                                                                // 71",
    "longname": "<anonymous>~ReactiveVar#set",
    "memberof": "<anonymous>~ReactiveVar",
    "name": "set",
    "params": [
      {
        "description": "<p>// 72</p>",
        "name": "newValue",
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value."
  },
  "<anonymous>~Template#events": {
    "description": "<p>// 463</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3690,
    "locus": "Client                                                                                                       // 465",
    "longname": "<anonymous>~Template#events",
    "memberof": "<anonymous>~Template",
    "name": "events",
    "params": [
      {
        "description": "<p>Event handlers to associate with this template.                                          // 466</p>",
        "name": "eventMap",
        "type": {
          "names": [
            "EventMap"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Specify event handlers for this template.                                                                  // 464"
  },
  "<anonymous>~Template#helpers": {
    "description": "<p>// 434</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3661,
    "locus": "Client                                                                                                       // 436",
    "longname": "<anonymous>~Template#helpers",
    "memberof": "<anonymous>~Template",
    "name": "helpers",
    "params": [
      {
        "description": "<p>Dictionary of helper functions by name.                                                     // 437</p>",
        "name": "helpers",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Specify template helpers available to this template.                                                       // 435"
  },
  "<anonymous>~Template.body": {
    "description": "<p>// 42</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/templating.js",
    "kind": "member",
    "lineno": 79,
    "locus": "Client                                                                                                // 45",
    "longname": "<anonymous>~Template.body",
    "memberof": "<anonymous>~Template",
    "name": "body",
    "scope": "static",
    "summary": "The [template object](#templates_api) representing your `<body>`                                    // 43\ntag.                                                                                                         // 44"
  },
  "<anonymous>~Tracker.Computation": {
    "description": "<p>// 144</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "instancename": "computation                                                                                          // 151",
    "kind": "function",
    "lineno": 187,
    "longname": "<anonymous>~Tracker.Computation",
    "memberof": "<anonymous>~Tracker",
    "name": "Computation",
    "params": [],
    "scope": "static",
    "summary": "A Computation object represents code that is repeatedly rerun                                             // 145\nin response to                                                                                                     // 146\nreactive data changes. Computations don't have return values; they just                                            // 147\nperform actions, such as rerendering a template on the screen. Computations                                        // 148\nare created using Tracker.autorun. Use stop to prevent further rerunning of a                                      // 149\ncomputation.                                                                                                       // 150"
  },
  "<anonymous>~Tracker.Computation#invalidate": {
    "description": "<p>// 264</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 302,
    "locus": "Client                                                                                                      // 266",
    "longname": "<anonymous>~Tracker.Computation#invalidate",
    "memberof": "<anonymous>~Tracker",
    "name": "Computation#invalidate",
    "params": [],
    "scope": "static",
    "summary": "Invalidates this computation so that it will be rerun.                                                    // 265"
  },
  "<anonymous>~Tracker.Computation#onInvalidate": {
    "description": "<p>// 222</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 261,
    "locus": "Client                                                                                                      // 224",
    "longname": "<anonymous>~Tracker.Computation#onInvalidate",
    "memberof": "<anonymous>~Tracker",
    "name": "Computation#onInvalidate",
    "params": [
      {
        "description": "<p>Function to be called on invalidation. Receives one argument, the computation that was invalidated.</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again."
  },
  "<anonymous>~Tracker.Computation#onStop": {
    "description": "<p>// 242</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 281,
    "locus": "Client                                                                                                      // 244",
    "longname": "<anonymous>~Tracker.Computation#onStop",
    "memberof": "<anonymous>~Tracker",
    "name": "Computation#onStop",
    "params": [
      {
        "description": "<p>Function to be called on stop. Receives one argument, the computation that was stopped.</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks."
  },
  "<anonymous>~Tracker.Computation#stop": {
    "description": "<p>// 293</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 331,
    "locus": "Client                                                                                                      // 295",
    "longname": "<anonymous>~Tracker.Computation#stop",
    "memberof": "<anonymous>~Tracker",
    "name": "Computation#stop",
    "params": [],
    "scope": "static",
    "summary": "Prevents this computation from rerunning.                                                                 // 294"
  },
  "<anonymous>~Tracker.Dependency": {
    "classdesc": "<p>// 365</p>",
    "description": "<p>// 359</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "instancename": "dependency                                                                                           // 366",
    "kind": "class",
    "lineno": 402,
    "longname": "<anonymous>~Tracker.Dependency",
    "memberof": "<anonymous>~Tracker",
    "name": "Dependency",
    "params": [],
    "scope": "static",
    "summary": "A Dependency represents an atomic unit of reactive data that a                                            // 360\ncomputation might depend on. Reactive data sources such as Session or                                              // 361\nMinimongo internally create different Dependency objects for different                                             // 362\npieces of data, each of which may be depended on by multiple computations.                                         // 363\nWhen the data changes, the computations are invalidated.                                                           // 364"
  },
  "<anonymous>~Tracker.Dependency#changed": {
    "description": "<p>// 410</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 448,
    "locus": "Client                                                                                                      // 412",
    "longname": "<anonymous>~Tracker.Dependency#changed",
    "memberof": "<anonymous>~Tracker",
    "name": "Dependency#changed",
    "params": [],
    "scope": "static",
    "summary": "Invalidate all dependent computations immediately and remove them as dependents.                          // 411"
  },
  "<anonymous>~Tracker.Dependency#depend": {
    "description": "<p>// 379</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 423,
    "locus": "Client                                                                                                      // 385",
    "longname": "<anonymous>~Tracker.Dependency#depend",
    "memberof": "<anonymous>~Tracker",
    "name": "Dependency#depend",
    "params": [
      {
        "description": "<p>An optional computation declared to depend on <code>dependency</code> instead of the current computation.</p>",
        "name": "fromComputation",
        "optional": true,
        "type": {
          "names": [
            "Tracker.Computation"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 387</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.\n                                                                                                                      // 381\nIf there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.     // 382\n                                                                                                                      // 383\nReturns true if the computation is a new dependent of `dependency` rather than an existing one.                       // 384"
  },
  "<anonymous>~Tracker.Dependency#hasDependents": {
    "description": "<p>// 422</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 461,
    "locus": "Client                                                                                                      // 424",
    "longname": "<anonymous>~Tracker.Dependency#hasDependents",
    "memberof": "<anonymous>~Tracker",
    "name": "Dependency#hasDependents",
    "params": [],
    "returns": [
      {
        "description": "<p>// 425</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change."
  },
  "<anonymous>~Tracker.active": {
    "description": "<p>// 13</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "member",
    "lineno": 52,
    "locus": "Client                                                                                                      // 15",
    "longname": "<anonymous>~Tracker.active",
    "memberof": "<anonymous>~Tracker",
    "name": "active",
    "scope": "static",
    "summary": "True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.",
    "type": {
      "names": [
        "Boolean"
      ]
    }
  },
  "<anonymous>~Tracker.afterFlush": {
    "description": "<p>// 611</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 650,
    "locus": "Client                                                                                                      // 613",
    "longname": "<anonymous>~Tracker.afterFlush",
    "memberof": "<anonymous>~Tracker",
    "name": "afterFlush",
    "params": [
      {
        "description": "<p>A function to call at flush time.                                                       // 614</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again."
  },
  "<anonymous>~Tracker.autorun": {
    "description": "<p>// 542</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 589,
    "locus": "Client                                                                                                      // 546",
    "longname": "<anonymous>~Tracker.autorun",
    "memberof": "<anonymous>~Tracker",
    "name": "autorun",
    "options": [
      {
        "description": "<p>Optional. The function to run when an error                                      // 550\nhappens in the Computation. The only argument it recieves is the Error                                             // 551\nthrown. Defaults to the error being logged to the console.                                                         // 552</p>",
        "name": "onError",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>The function to run. It receives                                      // 547\none argument: the Computation object that will be returned.                                                        // 548</p>",
        "name": "runFunc",
        "type": {
          "names": [
            "Tracker.ComputationFunction"
          ]
        }
      },
      {
        "description": "<p>// 549</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 553</p>",
        "type": {
          "names": [
            "Tracker.Computation"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Run a function now and rerun it later whenever its dependencies                                           // 543\nchange. Returns a Computation object that can be used to stop or observe the                                       // 544\nrerunning.                                                                                                         // 545"
  },
  "<anonymous>~Tracker.currentComputation": {
    "description": "<p>// 22</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "member",
    "lineno": 61,
    "locus": "Client                                                                                                      // 24",
    "longname": "<anonymous>~Tracker.currentComputation",
    "memberof": "<anonymous>~Tracker",
    "name": "currentComputation",
    "scope": "static",
    "summary": "The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.",
    "type": {
      "names": [
        "Tracker.Computation"
      ]
    }
  },
  "<anonymous>~Tracker.flush": {
    "description": "<p>// 436</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 474,
    "locus": "Client                                                                                                      // 438",
    "longname": "<anonymous>~Tracker.flush",
    "memberof": "<anonymous>~Tracker",
    "name": "flush",
    "params": [],
    "scope": "static",
    "summary": "Process all reactive updates immediately and ensure that all invalidated computations are rerun.          // 437"
  },
  "<anonymous>~Tracker.nonreactive": {
    "description": "<p>// 580</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 619,
    "locus": "Client                                                                                                      // 582",
    "longname": "<anonymous>~Tracker.nonreactive",
    "memberof": "<anonymous>~Tracker",
    "name": "nonreactive",
    "params": [
      {
        "description": "<p>A function to call immediately.                                                             // 583</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Run a function without tracking dependencies.                                                             // 581"
  },
  "<anonymous>~Tracker.onInvalidate": {
    "description": "<p>// 597</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "function",
    "lineno": 636,
    "locus": "Client                                                                                                      // 599",
    "longname": "<anonymous>~Tracker.onInvalidate",
    "memberof": "<anonymous>~Tracker",
    "name": "onInvalidate",
    "params": [
      {
        "description": "<p>A callback function that will be invoked as <code>func(c)</code>, where <code>c</code> is the computation on which the callback is registered.</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped."
  },
  "ActiveLayout.getAppTitle": {
    "examples": [
      "```html\nActiveLayout.getPageWidth();\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/lib/ActiveLayout.js",
    "kind": "member",
    "lineno": 23,
    "locus": "Client",
    "longname": "ActiveLayout.getAppTitle",
    "memberof": "ActiveLayout",
    "name": "getAppTitle",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the application title.",
    "version": "1.2.3"
  },
  "ActiveLayout.getPageWidth": {
    "examples": [
      "```html\nActiveLayout.getPageWidth();\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/lib/ActiveLayout.js",
    "kind": "member",
    "lineno": 3,
    "locus": "Client",
    "longname": "ActiveLayout.getPageWidth",
    "memberof": "ActiveLayout",
    "name": "getPageWidth",
    "returns": [
      {
        "type": {
          "names": [
            "StyleString"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the application page width.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getAppTitle}}": {
    "examples": [
      "```html\n<h1>{{getAppTitle}}</h1>\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getAppTitle}}",
    "memberof": "ActiveLayout",
    "name": "{{getAppTitle}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the application title.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getConnection}}": {
    "examples": [
      "```html\n<div>{{getStatusLabelText}}</div>\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 41,
    "link": "The quick brown fox.",
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getConnection}}",
    "memberof": "ActiveLayout",
    "name": "{{getConnection}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Display the connection status of the Meteor app.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getCreatedAt}}": {
    "examples": [
      "```html\n<div>{{getCreatedAt}}</div>\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 154,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getCreatedAt}}",
    "memberof": "ActiveLayout",
    "name": "{{getCreatedAt}}",
    "returns": [
      {
        "type": {
          "names": [
            "DateString"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the timestamp of when the record was created, returned as a text string.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getNavWidth}}": {
    "examples": [
      "```html\n<nav style=\"{{getNavWidth}}\"></nav>\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 20,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getNavWidth}}",
    "memberof": "ActiveLayout",
    "name": "{{getNavWidth}}",
    "returns": [
      {
        "type": {
          "names": [
            "Style"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the calculated width of the navbar.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{getStatusLabelColor}}": {
    "examples": [
      "```html\n<div>{{getStatusLabelText}}</div>\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 64,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{getStatusLabelColor}}",
    "memberof": "ActiveLayout",
    "name": "{{getStatusLabelColor}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "see": [
      "'foo'"
    ],
    "since": "1.2.3",
    "summary": "Returns a color, based on the connection status of the Meteor app.",
    "todo:": "Upgrade from {String} to {Hex}",
    "version": "1.2.3"
  },
  "ActiveLayout.{{isAdmin}}": {
    "examples": [
      "```html\n{{#if isAdmin}}<div><!-- privat content --></div>{{/if}}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 88,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{isAdmin}}",
    "memberof": "ActiveLayout",
    "name": "{{isAdmin}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Checks the Roles package to see if user is an Admin.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{isLoggedIn}}": {
    "examples": [
      "```html\n{{#if isRole 'secretary'}}<div><!-- secretary content --></div>{{/if}}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 170,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{isLoggedIn}}",
    "memberof": "ActiveLayout",
    "name": "{{isLoggedIn}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Syntactic sugar for determining if the user is logged in.",
    "version": "1.2.3"
  },
  "ActiveLayout.{{isRole}}": {
    "examples": [
      "```html\n{{#if isRole 'secretary'}}<div><!-- secretary content --></div>{{/if}}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-layout/client/template.helpers.js",
    "kind": "member",
    "lineno": 123,
    "locus": "Client, Blaze Template",
    "longname": "ActiveLayout.{{isRole}}",
    "memberof": "ActiveLayout",
    "name": "{{isRole}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Checks that the user has the specified type of role.",
    "version": "1.2.3"
  },
  "ActiveRecord.ActiveRecord": {
    "examples": [
      "```html\nActiveLayout.getPageWidth();\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-record/lib/ActiveRecord.js",
    "kind": "class",
    "lineno": 10,
    "locus": "Client",
    "longname": "ActiveRecord.ActiveRecord",
    "memberof": "ActiveRecord",
    "name": "ActiveRecord",
    "params": [],
    "scope": "static",
    "summary": "An active-record object.",
    "version": "1.2.3"
  },
  "Blaze                                                                                                    // 2": {
    "description": "<p>// 1</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "namespace",
    "lineno": 45,
    "longname": "Blaze                                                                                                    // 2",
    "name": "Blaze                                                                                                    // 2",
    "scope": "global",
    "summary": "The namespace for all Blaze-related methods and classes.                                                   // 3"
  },
  "Blaze.TemplateInstance                                                                                  // 242#view                                                                                                        // 241": {
    "description": "<p>// 240</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3462,
    "locus": "Client                                                                                                     // 245",
    "longname": "Blaze.TemplateInstance                                                                                  // 242#view                                                                                                        // 241",
    "memberof": "Blaze.TemplateInstance                                                                                  // 242",
    "name": "view                                                                                                        // 241",
    "scope": "instance",
    "summary": "The [View](#blaze_view) object for this invocation of the template.                                      // 244",
    "type": {
      "names": [
        "Blaze.View"
      ]
    }
  },
  "Blaze.TemplateInstance                                                                                  // 253#firstNode                                                                                                   // 252": {
    "description": "<p>// 251</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3473,
    "locus": "Client                                                                                                     // 256",
    "longname": "Blaze.TemplateInstance                                                                                  // 253#firstNode                                                                                                   // 252",
    "memberof": "Blaze.TemplateInstance                                                                                  // 253",
    "name": "firstNode                                                                                                   // 252",
    "scope": "instance",
    "summary": "The first top-level DOM node in this template instance.                                                  // 255",
    "type": {
      "names": [
        "DOMNode"
      ]
    }
  },
  "Blaze.TemplateInstance                                                                                  // 263#lastNode                                                                                                    // 262": {
    "description": "<p>// 261</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3483,
    "locus": "Client                                                                                                     // 266",
    "longname": "Blaze.TemplateInstance                                                                                  // 263#lastNode                                                                                                    // 262",
    "memberof": "Blaze.TemplateInstance                                                                                  // 263",
    "name": "lastNode                                                                                                    // 262",
    "scope": "instance",
    "summary": "The last top-level DOM node in this template instance.                                                   // 265",
    "type": {
      "names": [
        "DOMNode"
      ]
    }
  },
  "Blaze.TemplateInstance                                                                                // 160#data                                                                                                     // 161": {
    "description": "<p>// 158</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3380,
    "locus": "Client                                                                                                   // 163",
    "longname": "Blaze.TemplateInstance                                                                                // 160#data                                                                                                     // 161",
    "memberof": "Blaze.TemplateInstance                                                                                // 160",
    "name": "data                                                                                                     // 161",
    "scope": "instance",
    "summary": "The data context of this instance's latest invocation.                                                 // 162"
  },
  "Collaboration.addAdministrator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addAdministrator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 158,
    "locus": "Anywhere",
    "longname": "Collaboration.addAdministrator",
    "memberof": "Collaboration",
    "name": "addAdministrator",
    "scope": "static",
    "summary": "Adds an administrator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.addAdministrators": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addAdministrators('janedoe@test.org, johndoe@someplace.org');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 174,
    "locus": "Anywhere",
    "longname": "Collaboration.addAdministrators",
    "memberof": "Collaboration",
    "name": "addAdministrators",
    "scope": "static",
    "summary": "Adds an administrator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.addCollaborator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addCollaborator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 119,
    "locus": "Anywhere",
    "longname": "Collaboration.addCollaborator",
    "memberof": "Collaboration",
    "name": "addCollaborator",
    "scope": "static",
    "summary": "Adds a collaborator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.addCollaborators": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addCollaborators('janedoe@test.org, johndoe@someplace.org');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 137,
    "locus": "Anywhere",
    "longname": "Collaboration.addCollaborators",
    "memberof": "Collaboration",
    "name": "addCollaborators",
    "scope": "static",
    "summary": "Adds a collaborator to the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.getAssociatedCollaborations": {
    "examples": [
      "```js\nCollaborations.findOne({_id: \"ucsc\"}).getAssociatedCollaborations()\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 541,
    "locus": "Server",
    "longname": "Collaboration.getAssociatedCollaborations",
    "memberof": "Collaboration",
    "name": "getAssociatedCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the other collaborations this collaboration is linked to.",
    "version": "1.2.3"
  },
  "Collaboration.getAssociatedCollaborators": {
    "examples": [
      "```js\nCollaborations.findOne({_id: \"ucsc\"}).getAssociatedCollaborators()\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 471,
    "locus": "Server",
    "longname": "Collaboration.getAssociatedCollaborators",
    "memberof": "Collaboration",
    "name": "getAssociatedCollaborators",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the collaborators of the other collaborations this collaboration is linked to.",
    "version": "1.2.3"
  },
  "Collaboration.getCollaborators": {
    "examples": [
      "```\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getNames('janedoe@test.org')\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "function",
    "lineno": 454,
    "locus": "Anywhere",
    "longname": "Collaboration.getCollaborators",
    "memberof": "Collaboration",
    "name": "getCollaborators",
    "params": [],
    "scope": "static",
    "since": "clinical:METEOR@1.1.3",
    "summary": "Return the collaborators attached to the current Collaboration as an array."
  },
  "Collaboration.getCollaboratorsGraph": {
    "examples": [
      "```\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getCollaboratorsGraph();\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "function",
    "lineno": 326,
    "locus": "Anywhere",
    "longname": "Collaboration.getCollaboratorsGraph",
    "memberof": "Collaboration",
    "name": "getCollaboratorsGraph",
    "params": [],
    "scope": "static",
    "since": "clinical:METEOR@1.1.3",
    "summary": "Return the collaborators graph associated with the Collaboration."
  },
  "Collaboration.getExtendedGraph": {
    "examples": [
      "```\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getNames('janedoe@test.org')\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "function",
    "lineno": 394,
    "locus": "Anywhere",
    "longname": "Collaboration.getExtendedGraph",
    "memberof": "Collaboration",
    "name": "getExtendedGraph",
    "params": [],
    "scope": "static",
    "since": "clinical:METEOR@1.1.3",
    "summary": "Return the collaborators attached to the current Collaboration as an array."
  },
  "Collaboration.getNames": {
    "deprecated": true,
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getNames('janedoe@test.org')\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 263,
    "locus": "Client",
    "longname": "Collaboration.getNames",
    "memberof": "Collaboration",
    "name": "getNames",
    "scope": "static",
    "summary": "Gets the names of all the",
    "version": "1.2.3"
  },
  "Collaboration.getSelected": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getSelected()\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 57,
    "locus": "Anywhere",
    "longname": "Collaboration.getSelected",
    "memberof": "Collaboration",
    "name": "getSelected",
    "scope": "static",
    "summary": "Scans the DOM and picks up selected values.",
    "version": "1.2.3"
  },
  "Collaboration.getUrl": {
    "deprecated": true,
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.getUrl(collaborationName)\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 81,
    "locus": "Anywhere",
    "longname": "Collaboration.getUrl",
    "memberof": "Collaboration",
    "name": "getUrl",
    "scope": "static",
    "summary": "Returns a relative url where a user can get details of the collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.hasApplied": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\nif (collaboration.hasApplied('janedoe@test.org')){\n  // do stuff\n}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 236,
    "locus": "Anywhere",
    "longname": "Collaboration.hasApplied",
    "memberof": "Collaboration",
    "name": "hasApplied",
    "scope": "static",
    "summary": "Determines if user has applied to the Collaboration and is waiting in the requests queue.",
    "version": "1.2.3"
  },
  "Collaboration.hasMember": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\nif (collaboration.hasMember('janedoe@test.org')){\n  // do stuff\n}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 210,
    "locus": "Anywhere",
    "longname": "Collaboration.hasMember",
    "memberof": "Collaboration",
    "name": "hasMember",
    "scope": "static",
    "summary": "Checks if a Collaboration has a particular email address as a collaborator or administrator.",
    "version": "1.2.3"
  },
  "Collaboration.parse": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.parse()\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 36,
    "locus": "Anywhere",
    "longname": "Collaboration.parse",
    "memberof": "Collaboration",
    "name": "parse",
    "scope": "static",
    "summary": "Creates a new collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.removeAdministrator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.removeAdministrator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 194,
    "locus": "Anywhere",
    "longname": "Collaboration.removeAdministrator",
    "memberof": "Collaboration",
    "name": "removeAdministrator",
    "scope": "static",
    "summary": "Removes an administrator from the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.removeCollaborator": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.removeCollaborator('janedoe@test.org');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 102,
    "locus": "Anywhere",
    "longname": "Collaboration.removeCollaborator",
    "memberof": "Collaboration",
    "name": "removeCollaborator",
    "scope": "static",
    "summary": "Removes the specified collaborator from the Collaboration.",
    "version": "1.2.3"
  },
  "Collaboration.save": {
    "examples": [
      "```js\nvar collaboration = Collaborations.findOne({_id: \"ucsc\"});\ncollaboration.addCollaborator(\"janedoe@test.org\");\ncollaboration.save()\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.collaboration.js",
    "kind": "member",
    "lineno": 17,
    "locus": "Anywhere",
    "longname": "Collaboration.save",
    "memberof": "Collaboration",
    "name": "save",
    "scope": "static",
    "summary": "Save the collaboration object to the database.",
    "version": "1.2.3"
  },
  "Collaborations.Collaborations": {
    "examples": [
      "```js\nCollaborations = new Meteor.Collection(\"collaborations\");\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/collection.collaborations.js",
    "kind": "class",
    "lineno": 15,
    "locus": "Anywhere",
    "longname": "Collaborations.Collaborations",
    "memberof": "Collaborations",
    "name": "Collaborations",
    "params": [],
    "scope": "static",
    "summary": "Collaborations object defines a Cursor of collaboration records.",
    "version": "1.2.3"
  },
  "Collaborations.create": {
    "examples": [
      "```js\nCollaborations.create({\n      name: \"SampleCollab\",\n      description: \"Lorem ipsum...\",\n      isUnlisted: false,\n      requiresAdministratorApproval: false,\n      collaborators: ['janedoe@test.org'],\n      administrators: ['janedoe@test.org'],\n      invitations: [],\n      requests: []\n    })\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/collection.collaborations.js",
    "kind": "member",
    "lineno": 113,
    "locus": "Anywhere",
    "longname": "Collaborations.create",
    "memberof": "Collaborations",
    "name": "create",
    "scope": "static",
    "summary": "Creates a new collaboration.",
    "version": "1.2.3"
  },
  "DDP                                                                                                 // 2": {
    "description": "<p>// 1</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "namespace",
    "lineno": 47,
    "longname": "DDP                                                                                                 // 2",
    "name": "DDP                                                                                                 // 2",
    "scope": "global",
    "summary": "Namespace for DDP-related methods/classes.                                                            // 3"
  },
  "DDP                                                                                             // 2    // 10": {
    "description": "<p>// 1    // 9</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "namespace",
    "lineno": 37,
    "longname": "DDP                                                                                             // 2    // 10",
    "name": "DDP                                                                                             // 2    // 10",
    "scope": "global",
    "summary": "Namespace for DDP-related methods/classes.                                                        // 3    // 11"
  },
  "DDPCommon                                                                              // 2": {
    "description": "<p>// 1</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "kind": "namespace",
    "lineno": 35,
    "longname": "DDPCommon                                                                              // 2",
    "name": "DDPCommon                                                                              // 2",
    "scope": "global",
    "summary": "Namespace for DDPCommon-related methods/classes. Shared between                          // 3\n`ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4\nof a ddp client for both client AND server; and the ddp server is the                             // 5\nimplementation of the livedata server and stream server. Common                                   // 6\nfunctionality shared between both can be shared under this namespace                              // 7"
  },
  "DDPCommon.MethodInvocation                                                            // 24#isSimulation                                                                             // 23": {
    "description": "<p>// 20</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "kind": "member",
    "lineno": 281,
    "locus": "Anywhere                                                                                 // 22",
    "longname": "DDPCommon.MethodInvocation                                                            // 24#isSimulation                                                                             // 23",
    "memberof": "DDPCommon.MethodInvocation                                                            // 24",
    "name": "isSimulation                                                                             // 23",
    "scope": "instance",
    "summary": "Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 21",
    "type": {
      "names": [
        "Boolean"
      ]
    }
  },
  "DDPCommon.MethodInvocation                                                            // 42#userId                                                                                   // 41": {
    "description": "<p>// 38</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "kind": "member",
    "lineno": 299,
    "locus": "Anywhere                                                                                 // 40",
    "longname": "DDPCommon.MethodInvocation                                                            // 42#userId                                                                                   // 41",
    "memberof": "DDPCommon.MethodInvocation                                                            // 42",
    "name": "userId                                                                                   // 41",
    "scope": "instance",
    "summary": "The id of the user that made this method call, or `null` if no user was logged in.     // 39"
  },
  "DDPCommon.MethodInvocation                                                            // 57#connection                                                                               // 56": {
    "description": "<p>// 53</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "kind": "member",
    "lineno": 314,
    "locus": "Server                                                                                   // 55",
    "longname": "DDPCommon.MethodInvocation                                                            // 57#connection                                                                               // 56",
    "memberof": "DDPCommon.MethodInvocation                                                            // 57",
    "name": "connection                                                                               // 56",
    "scope": "instance",
    "summary": "Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call."
  },
  "DDPCommon.MethodInvocation                                                            // 73#unblock": {
    "description": "<p>// 70</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "kind": "function",
    "lineno": 337,
    "locus": "Server                                                                                   // 72",
    "longname": "DDPCommon.MethodInvocation                                                            // 73#unblock",
    "memberof": "DDPCommon.MethodInvocation                                                            // 73",
    "name": "unblock",
    "params": [],
    "scope": "instance",
    "summary": "Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber."
  },
  "DDPCommon.MethodInvocation                                                            // 85#setUserId": {
    "description": "<p>// 82</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-common.js",
    "kind": "function",
    "lineno": 350,
    "locus": "Server                                                                                   // 84",
    "longname": "DDPCommon.MethodInvocation                                                            // 85#setUserId",
    "memberof": "DDPCommon.MethodInvocation                                                            // 85",
    "name": "setUserId",
    "params": [
      {
        "description": "<p>The value that should be returned by <code>userId</code> on this connection.</p>",
        "name": "userId",
        "type": {
          "names": [
            "String",
            "null"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Set the logged in user.                                                                // 83"
  },
  "EJSON.CustomType                                                                                        // 21#typeName                                                                                                // 20": {
    "description": "<p>// 19</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 55,
    "locus": "Anywhere                                                                                                   // 23",
    "longname": "EJSON.CustomType                                                                                        // 21#typeName                                                                                                // 20",
    "memberof": "EJSON.CustomType                                                                                        // 21",
    "name": "typeName                                                                                                // 20",
    "params": [],
    "scope": "instance",
    "summary": "Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type)."
  },
  "EJSON.CustomType                                                                                        // 29#toJSONValue                                                                                             // 28": {
    "description": "<p>// 27</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 63,
    "locus": "Anywhere                                                                                                   // 31",
    "longname": "EJSON.CustomType                                                                                        // 29#toJSONValue                                                                                             // 28",
    "memberof": "EJSON.CustomType                                                                                        // 29",
    "name": "toJSONValue                                                                                             // 28",
    "params": [],
    "scope": "instance",
    "summary": "Serialize this instance into a JSON-compatible value.                                                    // 30"
  },
  "EJSON.CustomType                                                                                        // 37#clone                                                                                                   // 36": {
    "description": "<p>// 35</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 71,
    "locus": "Anywhere                                                                                                   // 39",
    "longname": "EJSON.CustomType                                                                                        // 37#clone                                                                                                   // 36",
    "memberof": "EJSON.CustomType                                                                                        // 37",
    "name": "clone                                                                                                   // 36",
    "params": [],
    "scope": "instance",
    "summary": "Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa."
  },
  "EJSON.CustomType                                                                                        // 45#equals                                                                                                  // 44": {
    "description": "<p>// 43</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ejson.js",
    "kind": "function",
    "lineno": 79,
    "locus": "Anywhere                                                                                                   // 47",
    "longname": "EJSON.CustomType                                                                                        // 45#equals                                                                                                  // 44",
    "memberof": "EJSON.CustomType                                                                                        // 45",
    "name": "equals                                                                                                  // 44",
    "params": [
      {
        "description": "<p>Another object to compare this to.                                                          // 48</p>",
        "name": "other",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Return `true` if `other` has a value equal to `this`; `false` otherwise.                                 // 46"
  },
  "Entry.{{logoIsDisplayed}}": {
    "examples": [
      "```html\n{{#if logoIsDisplayed}}\n   <div class=\"entryLogo\" style=\"background-image: url('{{logoUrl}}')\"></div>\n{{/if}}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-entry/components/entryPages.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Client",
    "longname": "Entry.{{logoIsDisplayed}}",
    "memberof": "Entry",
    "name": "{{logoIsDisplayed}}",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines if a block of code should be displayed based on whether the logo is set to be displayed.",
    "version": "1.2.3"
  },
  "Entry.{{logoUrl}}": {
    "examples": [
      "```html\n{{#if logoIsDisplayed}}\n   <div class=\"entryLogo\" style=\"background-image: url('{{logoUrl}}')\"></div>\n{{/if}}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-active-entry/components/entryPages.js",
    "kind": "member",
    "lineno": 26,
    "locus": "Client",
    "longname": "Entry.{{logoUrl}}",
    "memberof": "Entry",
    "name": "{{logoUrl}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retruns the Url of the logo asset.",
    "version": "1.2.3"
  },
  "Env.allow": {
    "examples": [
      "```js\nEnv.allow({\n  DEBUG: true,\n  NODE_ENV: true\n}});\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-env/lib/clinical-env-server.js",
    "kind": "member",
    "lineno": 74,
    "locus": "Server",
    "longname": "Env.allow",
    "memberof": "Env",
    "name": "allow",
    "scope": "static",
    "summary": "Exposes server environment variables on the client.",
    "version": "1.2.3"
  },
  "Env.variable": {
    "examples": [
      "```js\nif(Env.variable('DEBUG')){\n  console.log('debug message');\n}\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-env/lib/clinical-env-client.js",
    "kind": "member",
    "lineno": 11,
    "locus": "Client",
    "longname": "Env.variable",
    "memberof": "Env",
    "name": "variable",
    "scope": "static",
    "summary": "Detects if a specific environment variable was exposed from the server.",
    "version": "1.2.3"
  },
  "FormBuilder.add": {
    "deprecated": true,
    "filepath": "https://github.com/clinical-meteor//packages/clinical-form-builder/lib/FormBuilder.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Client",
    "longname": "FormBuilder.add",
    "memberof": "FormBuilder",
    "name": "add",
    "params": [
      {
        "name": "blockType"
      },
      {
        "name": "question"
      }
    ],
    "scope": "static",
    "summary": "Adds a section block to a form schema currently being built."
  },
  "FormBuilder.addQuestion": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-form-builder/lib/FormBuilder.js",
    "kind": "member",
    "lineno": 17,
    "locus": "Client",
    "longname": "FormBuilder.addQuestion",
    "memberof": "FormBuilder",
    "name": "addQuestion",
    "params": [
      {
        "name": "question"
      }
    ],
    "scope": "static",
    "summary": "Adds a section block to a form schema currently being built."
  },
  "FormBuilder.save": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-form-builder/lib/FormBuilder.js",
    "kind": "member",
    "lineno": 200,
    "locus": "Client",
    "longname": "FormBuilder.save",
    "memberof": "FormBuilder",
    "name": "save",
    "params": [
      {
        "name": "question"
      }
    ],
    "scope": "static",
    "summary": "Save a form to the metadata collection."
  },
  "HipaaLogger.logEvent": {
    "examples": [
      "```js\nvar hipaaEvent = {\n  eventType: \"modified\",\n  userId: Meteor.userId(),\n  userName: Meteor.user().profile.fullName,\n  collectionName: \"Medications\",\n  recordId: Random.id(),\n  patientId: Session.get('currentPatientId'),\n  patientName: Session.get('currentPatientName')\n};\nHipaaLogger.logEvent(hipaaEvent);\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-hipaa-audit-log/lib/HipaaLogger.js",
    "kind": "member",
    "lineno": 17,
    "locus": "Client",
    "longname": "HipaaLogger.logEvent",
    "memberof": "HipaaLogger",
    "name": "logEvent",
    "params": [
      {
        "name": "hipaaEvent.eventType"
      },
      {
        "name": "hipaaEvent.userId"
      },
      {
        "name": "hipaaEvent.userName"
      },
      {
        "name": "hipaaEvent.collectionName"
      },
      {
        "name": "hipaaEvent.recordId"
      },
      {
        "name": "hipaaEvent.patientId"
      },
      {
        "name": "hipaaEvent.patientName"
      },
      {
        "name": "hipaaEvent.message"
      }
    ],
    "scope": "static",
    "summary": "Detects if a specific environment variable was exposed from the server.",
    "version": "1.2.3"
  },
  "IterationCallback": {
    "description": "<p>// 140  // 148</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "typedef",
    "lineno": 184,
    "longname": "IterationCallback",
    "name": "IterationCallback",
    "params": [
      {
        "description": "<p>// 142  // 150</p>",
        "name": "doc",
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>// 143  // 151</p>",
        "name": "index",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "global",
    "type": {
      "names": [
        "function"
      ]
    }
  },
  "Match                                                                                   // 43": {
    "description": "<p>// 42</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/check.js",
    "kind": "namespace",
    "lineno": 70,
    "longname": "Match                                                                                   // 43",
    "name": "Match                                                                                   // 43",
    "scope": "global",
    "summary": "The namespace for all Match types and methods.                                            // 44"
  },
  "Meteor                                                                                                 //.methods": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1642,
    "locus": "Anywhere                                                                                                  //",
    "longname": "Meteor                                                                                                 //.methods",
    "memberof": "Meteor                                                                                                 //",
    "name": "methods",
    "params": [
      {
        "description": "<p>Dictionary whose keys are method names and values are functions.                         //</p>",
        "name": "methods",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Defines functions that can be invoked over the network by clients.                                      //"
  },
  "Meteor                                                                                                 //.onConnection": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1520,
    "locus": "Server                                                                                                    //",
    "longname": "Meteor                                                                                                 //.onConnection",
    "memberof": "Meteor                                                                                                 //",
    "name": "onConnection",
    "params": [
      {
        "description": "<p>The function to call when a new DDP connection is established.                        //</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Register a callback to be called when a new DDP connection is made to the server.                       //"
  },
  "Meteor                                                                                                 //.publish": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1590,
    "locus": "Server                                                                                                    //",
    "longname": "Meteor                                                                                                 //.publish",
    "memberof": "Meteor                                                                                                 //",
    "name": "publish",
    "params": [
      {
        "description": "<p>Name of the record set.  If <code>null</code>, the set has no name, and the record set is automatically sent to all connected clients.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Function called on the server each time a client subscribes.  Inside the function, <code>this</code> is the publish handler object, described below.  If the client passed arguments to <code>subscribe</code>, the function is called with the same arguments.</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Publish a record set.                                                                                   //"
  },
  "Meteor                                                                                              // 22.setTimeout": {
    "description": "<p>// 21</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/meteor.js",
    "kind": "function",
    "lineno": 437,
    "locus": "Anywhere                                                                                               // 24",
    "longname": "Meteor                                                                                              // 22.setTimeout",
    "memberof": "Meteor                                                                                              // 22",
    "name": "setTimeout",
    "params": [
      {
        "description": "<p>The function to run                                                                    // 25</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Number of milliseconds to wait before calling function                                  // 26</p>",
        "name": "delay",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call a function in the future after waiting for a specified delay.                                   // 23"
  },
  "Meteor                                                                                              // 33.setInterval": {
    "description": "<p>// 32</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/meteor.js",
    "kind": "function",
    "lineno": 448,
    "locus": "Anywhere                                                                                               // 35",
    "longname": "Meteor                                                                                              // 33.setInterval",
    "memberof": "Meteor                                                                                              // 33",
    "name": "setInterval",
    "params": [
      {
        "description": "<p>The function to run                                                                    // 36</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Number of milliseconds to wait between each function call.                              // 37</p>",
        "name": "delay",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call a function repeatedly, with a time delay between calls.                                         // 34"
  },
  "Meteor                                                                                              // 44.clearInterval": {
    "description": "<p>// 43</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/meteor.js",
    "kind": "function",
    "lineno": 458,
    "locus": "Anywhere                                                                                               // 46",
    "longname": "Meteor                                                                                              // 44.clearInterval",
    "memberof": "Meteor                                                                                              // 44",
    "name": "clearInterval",
    "params": [
      {
        "description": "<p>The handle returned by <code>Meteor.setInterval</code>                                                // 47</p>",
        "name": "id",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Cancel a repeating function call scheduled by `Meteor.setInterval`.                                  // 45"
  },
  "Meteor                                                                                              // 54.clearTimeout": {
    "description": "<p>// 53</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/meteor.js",
    "kind": "function",
    "lineno": 468,
    "locus": "Anywhere                                                                                               // 56",
    "longname": "Meteor                                                                                              // 54.clearTimeout",
    "memberof": "Meteor                                                                                              // 54",
    "name": "clearTimeout",
    "params": [
      {
        "description": "<p>The handle returned by <code>Meteor.setTimeout</code>                                                 // 57</p>",
        "name": "id",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Cancel a function call scheduled by `Meteor.setTimeout`.                                             // 55"
  },
  "Meteor                                                                                              // 84.wrapAsync": {
    "description": "<p>// 83</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/meteor.js",
    "kind": "function",
    "lineno": 154,
    "locus": "Anywhere                                                                                               // 86",
    "longname": "Meteor                                                                                              // 84.wrapAsync",
    "memberof": "Meteor                                                                                              // 84",
    "name": "wrapAsync",
    "params": [
      {
        "description": "<p>A function that takes a callback as its final parameter                                // 87</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Optional <code>this</code> object against which the original function will be invoked          // 88</p>",
        "name": "context",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback."
  },
  "Meteor                                                                                             // 1006.reconnect": {
    "description": "<p>// 1001</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 4125,
    "locus": "Client                                                                                                // 1005",
    "longname": "Meteor                                                                                             // 1006.reconnect",
    "memberof": "Meteor                                                                                             // 1006",
    "name": "reconnect",
    "params": [],
    "scope": "static",
    "summary": "Force an immediate reconnection attempt if the client is not connected to the server.               // 1002\n                                                                                                                  // 1003\n  This method does nothing if the client is already connected.                                                    // 1004"
  },
  "Meteor                                                                                             // 1016.disconnect": {
    "description": "<p>// 1013</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 4135,
    "locus": "Client                                                                                                // 1015",
    "longname": "Meteor                                                                                             // 1016.disconnect",
    "memberof": "Meteor                                                                                             // 1016",
    "name": "disconnect",
    "params": [],
    "scope": "static",
    "summary": "Disconnect the client from the server.                                                              // 1014"
  },
  "Meteor                                                                                             // 467.subscribe": {
    "arg1, arg2": [
      {
        "description": "<p>Optional arguments passed to publisher                                           // 473\nfunction on server.                                                                                          // 474</p>",
        "name": "..",
        "optional": true,
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "description": "<p>// 466</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 3597,
    "locus": "Client                                                                                                // 470",
    "longname": "Meteor                                                                                             // 467.subscribe",
    "memberof": "Meteor                                                                                             // 467",
    "name": "subscribe",
    "params": [
      {
        "description": "<p>Name of the subscription.  Matches the name of the                                      // 471\nserver's <code>publish()</code> call.                                                                                   // 472</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional. May include <code>onStop</code>                                          // 475\nand <code>onReady</code> callbacks. If there is an error, it is passed as an                                            // 476\nargument to <code>onStop</code>. If a function is passed instead of an object, it                                       // 477\nis interpreted as an <code>onReady</code> callback.                                                                     // 478</p>",
        "name": "callbacks",
        "optional": true,
        "type": {
          "names": [
            "function",
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Subscribe to a record set.  Returns a handle that provides                                          // 468\n`stop()` and `ready()` methods.                                                                              // 469"
  },
  "Meteor                                                                                             // 658.call": {
    "arg1, arg2": [
      {
        "description": "<p>Optional method arguments                                                  // 662</p>",
        "name": "..",
        "optional": true,
        "type": {
          "names": [
            "EJSONable"
          ]
        }
      }
    ],
    "description": "<p>// 657</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 3782,
    "locus": "Anywhere                                                                                              // 660",
    "longname": "Meteor                                                                                             // 658.call",
    "memberof": "Meteor                                                                                             // 658",
    "name": "call",
    "params": [
      {
        "description": "<p>Name of method to invoke                                                                // 661</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).</p>",
        "name": "asyncCallback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Invokes a method passing any number of arguments.                                                   // 659"
  },
  "Meteor                                                                                             // 696.apply": {
    "description": "<p>// 695</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 3823,
    "locus": "Anywhere                                                                                              // 698",
    "longname": "Meteor                                                                                             // 696.apply",
    "memberof": "Meteor                                                                                             // 696",
    "name": "apply",
    "options": [
      {
        "description": "<p>(Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.</p>",
        "name": "wait",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>(Client only) This callback is invoked with the error or result of the method (just like <code>asyncCallback</code>) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.</p>",
        "name": "onResultReceived",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>Name of method to invoke                                                                // 699</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Method arguments                                                                   // 700</p>",
        "name": "args",
        "type": {
          "names": [
            "Array.<EJSONable>"
          ]
        }
      },
      {
        "description": "<p>// 701</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional callback; same semantics as in <a href=\"#meteor_call\"><code>Meteor.call</code></a>.     // 704</p>",
        "name": "asyncCallback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Invoke a method passing an array of arguments.                                                      // 697"
  },
  "Meteor                                                                                             // 994.status": {
    "description": "<p>// 991</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/ddp-client.js",
    "kind": "function",
    "lineno": 4113,
    "locus": "Client                                                                                                // 993",
    "longname": "Meteor                                                                                             // 994.status",
    "memberof": "Meteor                                                                                             // 994",
    "name": "status",
    "params": [],
    "scope": "static",
    "summary": "Get the current connection status. A reactive data source.                                          // 992"
  },
  "Meteor                                                                                         // 1006.reconnect": {
    "description": "<p>// 1001</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "function",
    "lineno": 1646,
    "locus": "Client                                                                                            // 1005",
    "longname": "Meteor                                                                                         // 1006.reconnect",
    "memberof": "Meteor                                                                                         // 1006",
    "name": "reconnect",
    "params": [],
    "scope": "static",
    "summary": "Force an immediate reconnection attempt if the client is not connected to the server.           // 1002\n                                                                                                              // 1003\n  This method does nothing if the client is already connected.                                                // 1004"
  },
  "Meteor                                                                                         // 1016.disconnect": {
    "description": "<p>// 1013</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "function",
    "lineno": 1656,
    "locus": "Client                                                                                            // 1015",
    "longname": "Meteor                                                                                         // 1016.disconnect",
    "memberof": "Meteor                                                                                         // 1016",
    "name": "disconnect",
    "params": [],
    "scope": "static",
    "summary": "Disconnect the client from the server.                                                          // 1014"
  },
  "Meteor                                                                                         // 467  // 1077.subscribe": {
    "arg1, arg2": [
      {
        "description": "<p>Optional arguments passed to publisher                                       // 473  // 1083\nfunction on server.                                                                                      // 474  // 1084</p>",
        "name": "..",
        "optional": true,
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "description": "<p>// 466  // 1076</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "function",
    "lineno": 1118,
    "locus": "Client                                                                                            // 470  // 1080",
    "longname": "Meteor                                                                                         // 467  // 1077.subscribe",
    "memberof": "Meteor                                                                                         // 467  // 1077",
    "name": "subscribe",
    "params": [
      {
        "description": "<p>Name of the subscription.  Matches the name of the                                  // 471  // 1081\nserver's <code>publish()</code> call.                                                                               // 472  // 1082</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional. May include <code>onStop</code>                                      // 475  // 1085\nand <code>onReady</code> callbacks. If there is an error, it is passed as an                                        // 476  // 1086\nargument to <code>onStop</code>. If a function is passed instead of an object, it                                   // 477  // 1087\nis interpreted as an <code>onReady</code> callback.                                                                 // 478  // 1088</p>",
        "name": "callbacks",
        "optional": true,
        "type": {
          "names": [
            "function",
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Subscribe to a record set.  Returns a handle that provides                                      // 468  // 1078\n`stop()` and `ready()` methods.                                                                          // 469  // 1079"
  },
  "Meteor                                                                                         // 658  // 1268.call": {
    "arg1, arg2": [
      {
        "description": "<p>Optional method arguments                                              // 662  // 1272</p>",
        "name": "..",
        "optional": true,
        "type": {
          "names": [
            "EJSONable"
          ]
        }
      }
    ],
    "description": "<p>// 657  // 1267</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "function",
    "lineno": 1303,
    "locus": "Anywhere                                                                                          // 660  // 1270",
    "longname": "Meteor                                                                                         // 658  // 1268.call",
    "memberof": "Meteor                                                                                         // 658  // 1268",
    "name": "call",
    "params": [
      {
        "description": "<p>Name of method to invoke                                                            // 661  // 1271</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).</p>",
        "name": "asyncCallback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Invokes a method passing any number of arguments.                                               // 659  // 1269"
  },
  "Meteor                                                                                         // 696  // 1306.apply": {
    "description": "<p>// 695  // 1305</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "function",
    "lineno": 1344,
    "locus": "Anywhere                                                                                          // 698  // 1308",
    "longname": "Meteor                                                                                         // 696  // 1306.apply",
    "memberof": "Meteor                                                                                         // 696  // 1306",
    "name": "apply",
    "options": [
      {
        "description": "<p>(Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.</p>",
        "name": "wait",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>(Client only) This callback is invoked with the error or result of the method (just like <code>asyncCallback</code>) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.</p>",
        "name": "onResultReceived",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>Name of method to invoke                                                            // 699  // 1309</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Method arguments                                                               // 700  // 1310</p>",
        "name": "args",
        "type": {
          "names": [
            "Array.<EJSONable>"
          ]
        }
      },
      {
        "description": "<p>// 701  // 1311</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional callback; same semantics as in <a href=\"#meteor_call\"><code>Meteor.call</code></a>.         // 1314</p>",
        "name": "asyncCallback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Invoke a method passing an array of arguments.                                                  // 697  // 1307"
  },
  "Meteor                                                                                         // 994  // 1604.status": {
    "description": "<p>// 991  // 1601</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-client.js",
    "kind": "function",
    "lineno": 1634,
    "locus": "Client                                                                                            // 993  // 1603",
    "longname": "Meteor                                                                                         // 994  // 1604.status",
    "memberof": "Meteor                                                                                         // 994  // 1604",
    "name": "status",
    "params": [],
    "scope": "static",
    "summary": "Get the current connection status. A reactive data source.                                      // 992  // 1602"
  },
  "Meteor                                                                                      // 3": {
    "description": "<p>// 1</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "namespace",
    "lineno": 27,
    "longname": "Meteor                                                                                      // 3",
    "name": "Meteor                                                                                      // 3",
    "scope": "global",
    "summary": "The Meteor namespace                                                                          // 2"
  },
  "Meteor                                                                                     // 22.setTimeout": {
    "description": "<p>// 21</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 450,
    "locus": "Anywhere                                                                                      // 24",
    "longname": "Meteor                                                                                     // 22.setTimeout",
    "memberof": "Meteor                                                                                     // 22",
    "name": "setTimeout",
    "params": [
      {
        "description": "<p>The function to run                                                           // 25</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Number of milliseconds to wait before calling function                         // 26</p>",
        "name": "delay",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call a function in the future after waiting for a specified delay.                          // 23"
  },
  "Meteor                                                                                     // 33.setInterval": {
    "description": "<p>// 32</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 461,
    "locus": "Anywhere                                                                                      // 35",
    "longname": "Meteor                                                                                     // 33.setInterval",
    "memberof": "Meteor                                                                                     // 33",
    "name": "setInterval",
    "params": [
      {
        "description": "<p>The function to run                                                           // 36</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Number of milliseconds to wait between each function call.                     // 37</p>",
        "name": "delay",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Call a function repeatedly, with a time delay between calls.                                // 34"
  },
  "Meteor                                                                                     // 44.clearInterval": {
    "description": "<p>// 43</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 471,
    "locus": "Anywhere                                                                                      // 46",
    "longname": "Meteor                                                                                     // 44.clearInterval",
    "memberof": "Meteor                                                                                     // 44",
    "name": "clearInterval",
    "params": [
      {
        "description": "<p>The handle returned by <code>Meteor.setInterval</code>                                       // 47</p>",
        "name": "id",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45"
  },
  "Meteor                                                                                     // 54.clearTimeout": {
    "description": "<p>// 53</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 481,
    "locus": "Anywhere                                                                                      // 56",
    "longname": "Meteor                                                                                     // 54.clearTimeout",
    "memberof": "Meteor                                                                                     // 54",
    "name": "clearTimeout",
    "params": [
      {
        "description": "<p>The handle returned by <code>Meteor.setTimeout</code>                                        // 57</p>",
        "name": "id",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55"
  },
  "Meteor                                                                                     // 84.wrapAsync": {
    "description": "<p>// 83</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/meteor.js",
    "kind": "function",
    "lineno": 167,
    "locus": "Anywhere                                                                                      // 86",
    "longname": "Meteor                                                                                     // 84.wrapAsync",
    "memberof": "Meteor                                                                                     // 84",
    "name": "wrapAsync",
    "params": [
      {
        "description": "<p>A function that takes a callback as its final parameter                       // 87</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      },
      {
        "description": "<p>Optional <code>this</code> object against which the original function will be invoked</p>",
        "name": "context",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback."
  },
  "Mongo.Collection                                                                                         // 435#insert                                                                                                    // 434": {
    "description": "<p>// 431</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 516,
    "locus": "Anywhere                                                                                                    // 433",
    "longname": "Mongo.Collection                                                                                         // 435#insert                                                                                                    // 434",
    "memberof": "Mongo.Collection                                                                                         // 435",
    "name": "insert                                                                                                    // 434",
    "params": [
      {
        "description": "<p>The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.</p>",
        "name": "doc",
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.</p>",
        "name": "callback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Insert a document in the collection.  Returns its unique _id.                                             // 432"
  },
  "Mongo.Collection                                                                                         // 445#update                                                                                                     // 444": {
    "description": "<p>// 441</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 526,
    "locus": "Anywhere                                                                                                    // 443",
    "longname": "Mongo.Collection                                                                                         // 445#update                                                                                                     // 444",
    "memberof": "Mongo.Collection                                                                                         // 445",
    "name": "update                                                                                                     // 444",
    "options": [
      {
        "description": "<p>True to modify all matching documents; false to only modify one of the matching documents (the default).</p>",
        "name": "multi",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>True to insert a document if no matching documents are found.                      // 451</p>",
        "name": "upsert",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>Specifies which documents to modify                                                // 447</p>",
        "name": "selector",
        "type": {
          "names": [
            "MongoSelector"
          ]
        }
      },
      {
        "description": "<p>Specifies how to modify the documents                                              // 448</p>",
        "name": "modifier",
        "type": {
          "names": [
            "MongoModifier"
          ]
        }
      },
      {
        "description": "<p>// 449</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.</p>",
        "name": "callback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Modify one or more documents in the collection. Returns the number of affected documents.                 // 442"
  },
  "Mongo.Collection                                                                                         // 459#remove                                                                                                     // 458": {
    "description": "<p>// 455</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 540,
    "locus": "Anywhere                                                                                                    // 457",
    "longname": "Mongo.Collection                                                                                         // 459#remove                                                                                                     // 458",
    "memberof": "Mongo.Collection                                                                                         // 459",
    "name": "remove                                                                                                     // 458",
    "params": [
      {
        "description": "<p>Specifies which documents to remove                                                // 461</p>",
        "name": "selector",
        "type": {
          "names": [
            "MongoSelector"
          ]
        }
      },
      {
        "description": "<p>Optional.  If present, called with an error object as its argument.                   // 462</p>",
        "name": "callback",
        "optional": true,
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Remove documents from the collection                                                                      // 456"
  },
  "Mongo.Collection                                                                                       // 265#find                                                                                                     // 264": {
    "description": "<p>// 261</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 346,
    "locus": "Anywhere                                                                                                  // 263",
    "longname": "Mongo.Collection                                                                                       // 265#find                                                                                                     // 264",
    "memberof": "Mongo.Collection                                                                                       // 265",
    "name": "find                                                                                                     // 264",
    "options": [
      {
        "description": "<p>Sort order (default: natural order)                                     // 269</p>",
        "name": "sort",
        "type": {
          "names": [
            "MongoSortSpecifier"
          ]
        }
      },
      {
        "description": "<p>Number of results to skip at the beginning                                          // 270</p>",
        "name": "skip",
        "type": {
          "names": [
            "Number"
          ]
        }
      },
      {
        "description": "<p>Maximum number of results to return                                                // 271</p>",
        "name": "limit",
        "type": {
          "names": [
            "Number"
          ]
        }
      },
      {
        "description": "<p>Dictionary of fields to return or exclude.                           // 272</p>",
        "name": "fields",
        "type": {
          "names": [
            "MongoFieldSpecifier"
          ]
        }
      },
      {
        "description": "<p>(Client only) Default <code>true</code>; pass <code>false</code> to disable reactivity               // 273</p>",
        "name": "reactive",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>Overrides <code>transform</code> on the  <a href=\"#collections\"><code>Collection</code></a> for this cursor.  Pass <code>null</code> to disable transformation.</p>",
        "name": "transform",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>A query describing the documents to find                                       // 267</p>",
        "name": "selector",
        "optional": true,
        "type": {
          "names": [
            "MongoSelector"
          ]
        }
      },
      {
        "description": "<p>// 268</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 275</p>",
        "type": {
          "names": [
            "Mongo.Cursor"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Find the documents in a collection that match the selector.                                             // 262"
  },
  "Mongo.Collection                                                                                       // 291#findOne                                                                                                  // 290": {
    "description": "<p>// 287</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/mongo.js",
    "kind": "function",
    "lineno": 372,
    "locus": "Anywhere                                                                                                  // 289",
    "longname": "Mongo.Collection                                                                                       // 291#findOne                                                                                                  // 290",
    "memberof": "Mongo.Collection                                                                                       // 291",
    "name": "findOne                                                                                                  // 290",
    "options": [
      {
        "description": "<p>Sort order (default: natural order)                                     // 295</p>",
        "name": "sort",
        "type": {
          "names": [
            "MongoSortSpecifier"
          ]
        }
      },
      {
        "description": "<p>Number of results to skip at the beginning                                          // 296</p>",
        "name": "skip",
        "type": {
          "names": [
            "Number"
          ]
        }
      },
      {
        "description": "<p>Dictionary of fields to return or exclude.                           // 297</p>",
        "name": "fields",
        "type": {
          "names": [
            "MongoFieldSpecifier"
          ]
        }
      },
      {
        "description": "<p>(Client only) Default true; pass false to disable reactivity                   // 298</p>",
        "name": "reactive",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      },
      {
        "description": "<p>Overrides <code>transform</code> on the <a href=\"#collections\"><code>Collection</code></a> for this cursor.  Pass <code>null</code> to disable transformation.</p>",
        "name": "transform",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "params": [
      {
        "description": "<p>A query describing the documents to find                                       // 293</p>",
        "name": "selector",
        "optional": true,
        "type": {
          "names": [
            "MongoSelector"
          ]
        }
      },
      {
        "description": "<p>// 294</p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>// 300</p>",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Finds the first document that matches the selector, as ordered by sort and skip options.                // 288"
  },
  "Mongo.Collection.drop": {
    "examples": [
      "```js\n  todos = new Mongo('todos');\n  todo.insert({name: \"Butter\"})\n  todo.insert({name: \"Eggs\"})\n  todo.insert({name: \"Kale\"})\n  todos.drop();\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-extended-api/server/collection-extended-api.js",
    "kind": "member",
    "lineno": 1,
    "locus": "Server",
    "longname": "Mongo.Collection.drop",
    "memberof": "Mongo.Collection",
    "name": "drop",
    "scope": "static",
    "summary": "Toggles a boolean session variable true/false.",
    "version": "1.2.3"
  },
  "Mongo.Cursor                                                                                     // 150  // 158#forEach                                                                                           // 148  // 156": {
    "description": "<p>// 145  // 153</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "function",
    "lineno": 189,
    "locus": "Anywhere                                                                                            // 147  // 155",
    "longname": "Mongo.Cursor                                                                                     // 150  // 158#forEach                                                                                           // 148  // 156",
    "memberof": "Mongo.Cursor                                                                                     // 150  // 158",
    "name": "forEach                                                                                           // 148  // 156",
    "params": [
      {
        "description": "<p>Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.</p>",
        "name": "callback",
        "type": {
          "names": [
            "IterationCallback"
          ]
        }
      },
      {
        "description": "<p>An object which will be the value of <code>this</code> inside <code>callback</code>.                      // 152  // 160</p>",
        "name": "thisArg",
        "optional": true,
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Call `callback` once for each matching document, sequentially and synchronously.                  // 146  // 154"
  },
  "Mongo.Cursor                                                                                     // 186  // 194#map                                                                                                // 184  // 192": {
    "description": "<p>// 181  // 189</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "function",
    "lineno": 225,
    "locus": "Anywhere                                                                                            // 183  // 191",
    "longname": "Mongo.Cursor                                                                                     // 186  // 194#map                                                                                                // 184  // 192",
    "memberof": "Mongo.Cursor                                                                                     // 186  // 194",
    "name": "map                                                                                                // 184  // 192",
    "params": [
      {
        "description": "<p>Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.</p>",
        "name": "callback",
        "type": {
          "names": [
            "IterationCallback"
          ]
        }
      },
      {
        "description": "<p>An object which will be the value of <code>this</code> inside <code>callback</code>.                      // 188  // 196</p>",
        "name": "thisArg",
        "optional": true,
        "type": {
          "names": [
            "Any"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Map callback over all matching documents.  Returns an Array.                                      // 182  // 190"
  },
  "Mongo.Cursor                                                                                     // 201  // 209#fetch                                                                                             // 202  // 210": {
    "description": "<p>// 199  // 207</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "function",
    "lineno": 243,
    "locus": "Anywhere                                                                                            // 204  // 212",
    "longname": "Mongo.Cursor                                                                                     // 201  // 209#fetch                                                                                             // 202  // 210",
    "memberof": "Mongo.Cursor                                                                                     // 201  // 209",
    "name": "fetch                                                                                             // 202  // 210",
    "params": [],
    "returns": [
      {
        "description": "<p>// 205  // 213</p>",
        "type": {
          "names": [
            "Array.<Object>"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Return all matching documents as an Array.                                                        // 200  // 208"
  },
  "Mongo.Cursor                                                                                     // 218  // 226#count                                                                                             // 219  // 227": {
    "description": "<p>// 216  // 224</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "function",
    "lineno": 260,
    "locus": "Anywhere                                                                                            // 221  // 229",
    "longname": "Mongo.Cursor                                                                                     // 218  // 226#count                                                                                             // 219  // 227",
    "memberof": "Mongo.Cursor                                                                                     // 218  // 226",
    "name": "count                                                                                             // 219  // 227",
    "params": [],
    "returns": [
      {
        "description": "<p>// 222  // 230</p>",
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Returns the number of documents that match a query.                                               // 217  // 225"
  },
  "Mongo.Cursor                                                                                   // 299  // 307#observe": {
    "description": "<p>// 296  // 304</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "function",
    "lineno": 347,
    "locus": "Anywhere                                                                                          // 298  // 306",
    "longname": "Mongo.Cursor                                                                                   // 299  // 307#observe",
    "memberof": "Mongo.Cursor                                                                                   // 299  // 307",
    "name": "observe",
    "params": [
      {
        "description": "<p>Functions to call to deliver the result set as it changes                      // 301  // 309</p>",
        "name": "callbacks",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Watch a query.  Receive callbacks as the result set changes.                                    // 297  // 305"
  },
  "Mongo.Cursor                                                                                   // 311  // 319#observeChanges": {
    "description": "<p>// 308  // 316</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/minimongo.js",
    "kind": "function",
    "lineno": 359,
    "locus": "Anywhere                                                                                          // 310  // 318",
    "longname": "Mongo.Cursor                                                                                   // 311  // 319#observeChanges",
    "memberof": "Mongo.Cursor                                                                                   // 311  // 319",
    "name": "observeChanges",
    "params": [
      {
        "description": "<p>Functions to call to deliver the result set as it changes                      // 313  // 321</p>",
        "name": "callbacks",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks."
  },
  "Npm.require": {
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/boot.js",
    "kind": "function",
    "lineno": 148,
    "locus": "Server",
    "longname": "Npm.require",
    "memberof": "Npm",
    "name": "require",
    "params": [
      {
        "description": "<p>The name of the package to require.</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Require a package that was specified using\n`Npm.depends()`."
  },
  "Roles.addUsersToRoles": {
    "examples": [
      "Roles.addUsersToRoles(userId, 'admin')\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n    Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 114,
    "longname": "Roles.addUsersToRoles",
    "memberof": "Roles",
    "name": "addUsersToRoles",
    "params": [
      {
        "description": "<p>User id(s) or object(s) with an _id field</p>",
        "name": "users",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Name(s) of roles/permissions to add users to</p>",
        "name": "roles",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional group name. If supplied, roles will be\n                        specific to that group.\n                        Group names can not start with a '$' or contain\n                        null characters.  Periods in names '.' are\n                        automatically converted to underscores.\n                        The special group Roles.GLOBAL_GROUP provides\n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the\n                        Roles.GLOBAL_GROUP group will be automatically\n                        included in checks for any group.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Add users to roles. Will create roles as needed.\n\nNOTE: Mixing grouped and non-grouped roles for the same user\n      is not supported and will throw an error.\n\nMakes 2 calls to database:\n 1. retrieve list of all existing roles\n 2. update users' roles"
  },
  "Roles.createRole": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 55,
    "longname": "Roles.createRole",
    "memberof": "Roles",
    "name": "createRole",
    "params": [
      {
        "description": "<p>Name of role</p>",
        "name": "role",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>id of new role</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Create a new role. Whitespace will be trimmed."
  },
  "Roles.deleteRole": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 89,
    "longname": "Roles.deleteRole",
    "memberof": "Roles",
    "name": "deleteRole",
    "params": [
      {
        "description": "<p>Name of role</p>",
        "name": "role",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Delete an existing role.  Will throw \"Role in use\" error if any users\nare currently assigned to the target role."
  },
  "Roles.getAllRoles": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 415,
    "longname": "Roles.getAllRoles",
    "memberof": "Roles",
    "name": "getAllRoles",
    "params": [],
    "returns": [
      {
        "description": "<p>cursor of existing roles</p>",
        "type": {
          "names": [
            "Cursor"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve set of all existing roles"
  },
  "Roles.getGroupsForUser": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 494,
    "longname": "Roles.getGroupsForUser",
    "memberof": "Roles",
    "name": "getGroupsForUser",
    "params": [
      {
        "description": "<p>User Id or actual user object</p>",
        "name": "user",
        "type": {
          "names": [
            "String",
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional name of roles to restrict groups to.</p>",
        "name": "role",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted</p>",
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve users groups, if any"
  },
  "Roles.getRolesForUser": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 372,
    "longname": "Roles.getRolesForUser",
    "memberof": "Roles",
    "name": "getRolesForUser",
    "params": [
      {
        "description": "<p>User Id or actual user object</p>",
        "name": "user",
        "type": {
          "names": [
            "String",
            "Object"
          ]
        }
      },
      {
        "description": "<p>Optional name of group to restrict roles to.\n                        User's Roles.GLOBAL_GROUP will also be included.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>Array of user's roles, unsorted.</p>",
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve users roles"
  },
  "Roles.getUsersInRole": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 426,
    "longname": "Roles.getUsersInRole",
    "memberof": "Roles",
    "name": "getUsersInRole",
    "params": [
      {
        "description": "<p>Name of role/permission.  If array, users\n                           returned will have at least one of the roles\n                           specified but need not have <em>all</em> roles.</p>",
        "name": "role",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional name of group to restrict roles to.\n                        User's Roles.GLOBAL_GROUP will also be checked.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional options which are passed directly\n                          through to <code>Meteor.users.find(query, options)</code></p>",
        "name": "options",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>cursor of users in role</p>",
        "type": {
          "names": [
            "Cursor"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Retrieve all users who are in target role.\n\nNOTE: This is an expensive query; it performs a full collection scan\non the users collection since there is no index set on the 'roles' field.\nThis is by design as most queries will specify an _id so the _id index is\nused automatically."
  },
  "Roles.removeUsersFromRoles": {
    "examples": [
      "Roles.removeUsersFromRoles(users.bob, 'admin')\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])\n    Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 181,
    "longname": "Roles.removeUsersFromRoles",
    "memberof": "Roles",
    "name": "removeUsersFromRoles",
    "params": [
      {
        "description": "<p>User id(s) or object(s) with an _id field</p>",
        "name": "users",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Name(s) of roles to add users to</p>",
        "name": "roles",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional. Group name. If supplied, only that\n                        group will have roles removed.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Remove users from roles"
  },
  "Roles.setUserRoles": {
    "examples": [
      "Roles.setUserRoles(userId, 'admin')\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n    Roles.setUserRoles([user1, user2], ['user','editor'])\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n    Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 151,
    "longname": "Roles.setUserRoles",
    "memberof": "Roles",
    "name": "setUserRoles",
    "params": [
      {
        "description": "<p>User id(s) or object(s) with an _id field</p>",
        "name": "users",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Name(s) of roles/permissions to add users to</p>",
        "name": "roles",
        "type": {
          "names": [
            "Array",
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional group name. If supplied, roles will be\n                        specific to that group.\n                        Group names can not start with '$'.\n                        Periods in names '.' are automatically converted\n                        to underscores.\n                        The special group Roles.GLOBAL_GROUP provides\n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the\n                        Roles.GLOBAL_GROUP group will be automatically\n                        included in checks for any group.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Set a users roles/permissions."
  },
  "Roles.userIsInRole": {
    "examples": [
      "// non-group usage\n    Roles.userIsInRole(user, 'admin')\n    Roles.userIsInRole(user, ['admin','editor'])\n    Roles.userIsInRole(userId, 'admin')\n    Roles.userIsInRole(userId, ['admin','editor'])\n\n    // per-group usage\n    Roles.userIsInRole(user,   ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)\n\n    // this format can also be used as short-hand for Roles.GLOBAL_GROUP\n    Roles.userIsInRole(user, 'admin')"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "function",
    "lineno": 259,
    "longname": "Roles.userIsInRole",
    "memberof": "Roles",
    "name": "userIsInRole",
    "params": [
      {
        "description": "<p>User Id or actual user object</p>",
        "name": "user",
        "type": {
          "names": [
            "String",
            "Object"
          ]
        }
      },
      {
        "description": "<p>Name of role/permission or Array of\n                           roles/permissions to check against.  If array,\n                           will return true if user is in <em>any</em> role.</p>",
        "name": "roles",
        "type": {
          "names": [
            "String",
            "Array"
          ]
        }
      },
      {
        "description": "<p>Optional. Name of group.  If supplied, limits check\n                        to just that group.\n                        The user's Roles.GLOBAL_GROUP will always be checked\n                        whether group is specified or not.</p>",
        "name": "group",
        "optional": true,
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>true if user is in <em>any</em> of the target roles</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Check if user has specified permissions/roles"
  },
  "SchemaHydrator.dehydrate": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 124,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.dehydrate",
    "memberof": "SchemaHydrator",
    "name": "dehydrate",
    "returns": [
      {
        "type": {
          "names": [
            "JSON"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Converts a SimpleSchema object into a JSON object which can be stored in Mongo.  Loses any functions or methods associated with the Schema.",
    "version": "1.2.3"
  },
  "SchemaHydrator.hydrate": {
    "examples": [
      "```js\nvar Foo = new Collection('foo');\nFoo.attachSchema(SchemaHydrator.hydrate(Metadata.findOne({name: \"AcmeWidgetSchema\"})))\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 2,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.hydrate",
    "memberof": "SchemaHydrator",
    "name": "hydrate",
    "returns": [
      {
        "type": {
          "names": [
            "SimpleSchema"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Converts a JSON object into a SimpleSchema object.",
    "version": "1.2.3"
  },
  "SchemaHydrator.hydratePartialSchema": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 74,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.hydratePartialSchema",
    "memberof": "SchemaHydrator",
    "name": "hydratePartialSchema",
    "returns": [
      {
        "type": {
          "names": [
            "JSON"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Converts a JSON object representing a schena object into a proper SimpleSchema.  Used in the FormBuilder API.",
    "version": "1.2.3"
  },
  "SchemaHydrator.isTrue": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-schema-hydrator/lib/SchemaHydrator.js",
    "kind": "member",
    "lineno": 152,
    "locus": "Anywhere",
    "longname": "SchemaHydrator.isTrue",
    "memberof": "SchemaHydrator",
    "name": "isTrue",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Verifies the object is loaded.",
    "version": "1.2.3"
  },
  "Session                                                           // 19.setDefault                                                          // 20": {
    "description": "<p>// 18</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/session.js",
    "kind": "function",
    "lineno": 55,
    "locus": "Client                                                               // 23",
    "longname": "Session                                                           // 19.setDefault                                                          // 20",
    "memberof": "Session                                                           // 19",
    "name": "setDefault                                                          // 20",
    "params": [
      {
        "description": "<p>The key to set, eg, <code>selectedItem</code>                      // 24</p>",
        "name": "key",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The new value for <code>key</code>                // 25</p>",
        "name": "value",
        "type": {
          "names": [
            "EJSONable",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Set a variable in the session if it hasn't been set before.        // 21\nOtherwise works exactly the same as [`Session.set`](#session_set).          // 22"
  },
  "Session                                                           // 29.get                                                                 // 30": {
    "description": "<p>// 28</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/session.js",
    "kind": "function",
    "lineno": 65,
    "locus": "Client                                                               // 37",
    "longname": "Session                                                           // 29.get                                                                 // 30",
    "memberof": "Session                                                           // 29",
    "name": "get                                                                 // 30",
    "params": [
      {
        "description": "<p>The name of the session variable to return              // 38</p>",
        "name": "key",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Get the value of a session variable. If inside a [reactive         // 31\ncomputation](#reactivity), invalidate the computation the next time the     // 32\nvalue of the variable is changed by [`Session.set`](#session_set). This     // 33\nreturns a clone of the session value, so if it's an object or an array,     // 34\nmutating the returned value has no effect on the value stored in the        // 35\nsession.                                                                    // 36"
  },
  "Session                                                           // 42.equals                                                              // 43": {
    "description": "<p>// 41</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/session.js",
    "kind": "function",
    "lineno": 78,
    "locus": "Client                                                               // 47",
    "longname": "Session                                                           // 42.equals                                                              // 43",
    "memberof": "Session                                                           // 42",
    "name": "equals                                                              // 43",
    "params": [
      {
        "description": "<p>The name of the session variable to test                // 48</p>",
        "name": "key",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The value to    // 49\ntest against                                                                // 50</p>",
        "name": "value",
        "type": {
          "names": [
            "String",
            "Number",
            "Boolean",
            "null",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Test if a session variable is equal to a value. If inside a        // 44\n[reactive computation](#reactivity), invalidate the computation the next    // 45\ntime the variable changes to or from the value.                             // 46"
  },
  "Session                                                           // 7  // 15.set                                                                 // 8  // 16": {
    "description": "<p>// 6  // 14</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/session.js",
    "kind": "function",
    "lineno": 43,
    "locus": "Client                                                               // 13",
    "longname": "Session                                                           // 7  // 15.set                                                                 // 8  // 16",
    "memberof": "Session                                                           // 7  // 15",
    "name": "set                                                                 // 8  // 16",
    "params": [
      {
        "description": "<p>The key to set, eg, <code>selectedItem</code>                      // 14</p>",
        "name": "key",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The new value for <code>key</code>                // 15</p>",
        "name": "value",
        "type": {
          "names": [
            "EJSONable",
            "undefined"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Set a variable in the session. Notify any listeners that the value       // 17\nhas changed (eg: redraw templates, and rerun any                            // 10\n[`Tracker.autorun`](#tracker_autorun) computations, that called             // 11\n[`Session.get`](#session_get) on this `key`.)                               // 12"
  },
  "Session.clear": {
    "examples": [
      "```js\n  Session.clear('activePatient');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-extended-api/client/session-extended-api.js",
    "kind": "member",
    "lineno": 26,
    "locus": "Client",
    "longname": "Session.clear",
    "memberof": "Session",
    "name": "clear",
    "scope": "static",
    "summary": "Clears a session variable.",
    "version": "1.2.3"
  },
  "Session.toggle": {
    "examples": [
      "```js\n  Session.toggle('isSidebarVisible');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-extended-api/client/session-extended-api.js",
    "kind": "member",
    "lineno": 1,
    "locus": "Client",
    "longname": "Session.toggle",
    "memberof": "Session",
    "name": "toggle",
    "scope": "static",
    "summary": "Toggles a boolean session variable true/false.",
    "version": "1.2.3"
  },
  "String.addUnderscores": {
    "examples": [
      "```js\nvar foo = \"Quick brown fox\".addUnderscores();\n})\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-extended-api/lib/String.extensions.js",
    "kind": "member",
    "lineno": 1,
    "locus": "Anywhere",
    "longname": "String.addUnderscores",
    "memberof": "String",
    "name": "addUnderscores",
    "scope": "static",
    "summary": "Replaces spaces in a string with underscores.",
    "version": "1.2.3"
  },
  "Style.parse": {
    "examples": [
      "Template.foo.helpers({\n  getPageWidth: function(){\n    return Style.parse({\n      \"width\": \"80%\",\n      \"padding-left\": \"80%\",\n      \"padding-right\": \"80%\"\n    });\n  }\n});"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-extended-api/lib/Style.js",
    "kind": "member",
    "lineno": 4,
    "locus": "Anywhere",
    "longname": "Style.parse",
    "memberof": "Style",
    "name": "parse",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Serializes a json object into a text string."
  },
  "Subscription                                                                                           //#added": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1357,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#added",
    "memberof": "Subscription                                                                                           //",
    "name": "added",
    "params": [
      {
        "description": "<p>The name of the collection that contains the new document.                            //</p>",
        "name": "collection",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The new document's ID.                                                                        //</p>",
        "name": "id",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The fields in the new document.  If <code>_id</code> is present it is ignored.                       //</p>",
        "name": "fields",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Call inside the publish function.  Informs the subscriber that a document has been added to the record set."
  },
  "Subscription                                                                                           //#changed": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1374,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#changed",
    "memberof": "Subscription                                                                                           //",
    "name": "changed",
    "params": [
      {
        "description": "<p>The name of the collection that contains the changed document.                        //</p>",
        "name": "collection",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The changed document's ID.                                                                    //</p>",
        "name": "id",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The fields in the document that have changed, together with their new values.  If a field is not present in <code>fields</code> it was left unchanged; if it is present in <code>fields</code> and has a value of <code>undefined</code> it was removed from the document.  If <code>_id</code> is present it is ignored.</p>",
        "name": "fields",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Call inside the publish function.  Informs the subscriber that a document in the record set has been modified."
  },
  "Subscription                                                                                           //#connection                                                                                                //": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "member",
    "lineno": 1088,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#connection                                                                                                //",
    "memberof": "Subscription                                                                                           //",
    "name": "connection                                                                                                //",
    "scope": "instance",
    "summary": "Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription."
  },
  "Subscription                                                                                           //#error": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1305,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#error",
    "memberof": "Subscription                                                                                           //",
    "name": "error",
    "params": [
      {
        "description": "<p>The error to pass to the client.                                                            //</p>",
        "name": "error",
        "type": {
          "names": [
            "Error"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error)."
  },
  "Subscription                                                                                           //#onStop": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1335,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#onStop",
    "memberof": "Subscription                                                                                           //",
    "name": "onStop",
    "params": [
      {
        "description": "<p>The callback function                                                                     //</p>",
        "name": "func",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Call inside the publish function.  Registers a callback function to run when the subscription is stopped."
  },
  "Subscription                                                                                           //#ready": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1405,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#ready",
    "memberof": "Subscription                                                                                           //",
    "name": "ready",
    "params": [],
    "scope": "instance",
    "summary": "Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any."
  },
  "Subscription                                                                                           //#removed": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1389,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#removed",
    "memberof": "Subscription                                                                                           //",
    "name": "removed",
    "params": [
      {
        "description": "<p>The name of the collection that the document has been removed from.                   //</p>",
        "name": "collection",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The ID of the document that has been removed.                                                 //</p>",
        "name": "id",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Call inside the publish function.  Informs the subscriber that a document has been removed from the record set."
  },
  "Subscription                                                                                           //#stop": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "function",
    "lineno": 1322,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#stop",
    "memberof": "Subscription                                                                                           //",
    "name": "stop",
    "params": [],
    "scope": "instance",
    "summary": "Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error."
  },
  "Subscription                                                                                           //#userId                                                                                                    //": {
    "description": "<p>//</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/server/packages/ddp-server.js",
    "kind": "member",
    "lineno": 1130,
    "locus": "Server                                                                                                    //",
    "longname": "Subscription                                                                                           //#userId                                                                                                    //",
    "memberof": "Subscription                                                                                           //",
    "name": "userId                                                                                                    //",
    "scope": "instance",
    "summary": "Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.    //"
  },
  "Template                                                                                                  // 495.instance                                                                                                      // 494": {
    "description": "<p>// 492</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "function",
    "lineno": 3714,
    "locus": "Client                                                                                                       // 497",
    "longname": "Template                                                                                                  // 495.instance                                                                                                      // 494",
    "memberof": "Template                                                                                                  // 495",
    "name": "instance                                                                                                      // 494",
    "params": [],
    "returns": [
      {
        "description": "<p>// 498</p>",
        "type": {
          "names": [
            "Blaze.TemplateInstance"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "The [template instance](#template_inst) corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`."
  },
  "Template                                                                                                  // 68#onCreated                                                                                                    // 66": {
    "description": "<p>// 65</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3287,
    "locus": "Client                                                                                                       // 71",
    "longname": "Template                                                                                                  // 68#onCreated                                                                                                    // 66",
    "memberof": "Template                                                                                                  // 68",
    "name": "onCreated                                                                                                    // 66",
    "params": [
      {
        "description": "<p>A function to be added as a callback.                                                    // 70</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Register a function to be called when an instance of this template is created.                             // 69"
  },
  "Template                                                                                                  // 80#onRendered                                                                                                   // 78": {
    "description": "<p>// 77</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3299,
    "locus": "Client                                                                                                       // 83",
    "longname": "Template                                                                                                  // 80#onRendered                                                                                                   // 78",
    "memberof": "Template                                                                                                  // 80",
    "name": "onRendered                                                                                                   // 78",
    "params": [
      {
        "description": "<p>A function to be added as a callback.                                                    // 82</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Register a function to be called when an instance of this template is inserted into the DOM.               // 81"
  },
  "Template                                                                                                  // 92#onDestroyed                                                                                                  // 90": {
    "description": "<p>// 89</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3311,
    "locus": "Client                                                                                                       // 95",
    "longname": "Template                                                                                                  // 92#onDestroyed                                                                                                  // 90",
    "memberof": "Template                                                                                                  // 92",
    "name": "onDestroyed                                                                                                  // 90",
    "params": [
      {
        "description": "<p>A function to be added as a callback.                                                    // 94</p>",
        "name": "callback",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Register a function to be called when an instance of this template is removed from the DOM and destroyed.  // 93"
  },
  "Template                                                                                                // 182#created                                                                                                    // 180": {
    "deprecated": "in 1.1                                                                                                // 185",
    "description": "<p>// 179</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3401,
    "locus": "Client                                                                                                     // 184",
    "longname": "Template                                                                                                // 182#created                                                                                                    // 180",
    "memberof": "Template                                                                                                // 182",
    "name": "created                                                                                                    // 180",
    "scope": "instance",
    "summary": "Provide a callback when an instance of a template is created.                                            // 183"
  },
  "Template                                                                                                // 198#rendered                                                                                                   // 196": {
    "deprecated": "in 1.1                                                                                                // 201",
    "description": "<p>// 195</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3417,
    "locus": "Client                                                                                                     // 200",
    "longname": "Template                                                                                                // 198#rendered                                                                                                   // 196",
    "memberof": "Template                                                                                                // 198",
    "name": "rendered                                                                                                   // 196",
    "scope": "instance",
    "summary": "Provide a callback when an instance of a template is rendered.                                           // 199"
  },
  "Template                                                                                                // 211#destroyed                                                                                                  // 209": {
    "deprecated": "in 1.1                                                                                                // 214",
    "description": "<p>// 208</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/blaze.js",
    "kind": "member",
    "lineno": 3430,
    "locus": "Client                                                                                                     // 213",
    "longname": "Template                                                                                                // 211#destroyed                                                                                                  // 209",
    "memberof": "Template                                                                                                // 211",
    "name": "destroyed                                                                                                  // 209",
    "scope": "instance",
    "summary": "Provide a callback when an instance of a template is destroyed.                                          // 212"
  },
  "Template                                                                                           // 5.dynamic                                                                                            // 6": {
    "description": "<p>// 3</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/templating.js",
    "istemplate": "true                                                                                             // 4",
    "kind": "function",
    "lineno": 202,
    "locus": "Templates                                                                                             // 8",
    "longname": "Template                                                                                           // 5.dynamic                                                                                            // 6",
    "memberof": "Template                                                                                           // 5",
    "name": "dynamic                                                                                            // 6",
    "params": [
      {
        "description": "<p>The name of the template to include.                                                // 9</p>",
        "name": "template",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>Optional. The data context in which to include the                                    // 10\ntemplate.                                                                                                    // 11</p>",
        "name": "data",
        "optional": true,
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Choose a template to include dynamically, by name.                                                  // 7"
  },
  "Tracker                                                                                                 // 6": {
    "description": "<p>// 5</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "namespace",
    "lineno": 39,
    "longname": "Tracker                                                                                                 // 6",
    "name": "Tracker                                                                                                 // 6",
    "scope": "global",
    "summary": "The namespace for Tracker-related methods.                                                                // 7"
  },
  "Tracker.Computation                                                                                    // 166#stopped                                                                                                   // 168": {
    "description": "<p>// 163</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "member",
    "lineno": 197,
    "locus": "Client                                                                                                    // 165",
    "longname": "Tracker.Computation                                                                                    // 166#stopped                                                                                                   // 168",
    "memberof": "Tracker.Computation                                                                                    // 166",
    "name": "stopped                                                                                                   // 168",
    "scope": "instance",
    "summary": "True if this computation has been stopped.                                                              // 164"
  },
  "Tracker.Computation                                                                                    // 177#invalidated                                                                                               // 179": {
    "description": "<p>// 174</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "member",
    "lineno": 208,
    "locus": "Client                                                                                                    // 176",
    "longname": "Tracker.Computation                                                                                    // 177#invalidated                                                                                               // 179",
    "memberof": "Tracker.Computation                                                                                    // 177",
    "name": "invalidated                                                                                               // 179",
    "scope": "instance",
    "summary": "True if this computation has been invalidated (and not yet rerun), or if it has been stopped.           // 175",
    "type": {
      "names": [
        "Boolean"
      ]
    }
  },
  "Tracker.Computation                                                                                    // 189#firstRun                                                                                                  // 191": {
    "description": "<p>// 186</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "member",
    "lineno": 220,
    "locus": "Client                                                                                                    // 188",
    "longname": "Tracker.Computation                                                                                    // 189#firstRun                                                                                                  // 191",
    "memberof": "Tracker.Computation                                                                                    // 189",
    "name": "firstRun                                                                                                  // 191",
    "scope": "instance",
    "summary": "True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.",
    "type": {
      "names": [
        "Boolean"
      ]
    }
  },
  "Tracker.ComputationFunction": {
    "description": "<p>// 538</p>",
    "filepath": "https://github.com/clinical-meteor//.gagarin/local/bundle/programs/web.browser/packages/tracker.js",
    "kind": "typedef",
    "lineno": 572,
    "longname": "Tracker.ComputationFunction",
    "memberof": "Tracker",
    "name": "ComputationFunction",
    "params": [
      {
        "description": "<p>540</p>",
        "name": "//",
        "type": {
          "names": [
            "Tracker.Computation"
          ]
        }
      }
    ],
    "scope": "static",
    "type": {
      "names": [
        "function"
      ]
    }
  },
  "User": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "class",
    "lineno": 1,
    "longname": "User",
    "name": "User",
    "params": [
      {
        "description": "<p>An object representing a conversation ususally a Mongo document</p>",
        "name": "document",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "global",
    "summary": "Represents a User"
  },
  "User./testGetCollaborations": {
    "examples": [
      "```js\nMeteor.call('testGetCollaborations');\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 192,
    "locus": "Server",
    "longname": "User./testGetCollaborations",
    "memberof": "User",
    "name": "/testGetCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Write all the User collaborations to the server console log.",
    "version": "1.2.3"
  },
  "User.defaultEmail": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.defaultEmail());\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 137,
    "longname": "User.defaultEmail",
    "memberof": "User",
    "name": "defaultEmail",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the default email that an account is associated.  Defined as the first verified email in the emails array.",
    "version": "1.2.3"
  },
  "User.displayName": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.displayName());\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 19,
    "longname": "User.displayName",
    "memberof": "User",
    "name": "displayName",
    "returns": [
      {
        "description": "<p>A name representation of the user account</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "The personal name of the user account.",
    "version": "1.2.3"
  },
  "User.familyName": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.familyName());\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 116,
    "longname": "User.familyName",
    "memberof": "User",
    "name": "familyName",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the family (last) name of the user.",
    "version": "1.2.3"
  },
  "User.fullName": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.fullName());\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 73,
    "longname": "User.fullName",
    "memberof": "User",
    "name": "fullName",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the full name of the user.",
    "version": "1.2.3"
  },
  "User.getAllCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nselectedUser.getAllCollaborations().forEach(function(collaborationName){\n  console.log(collaborationNamplae);\n});\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.user.js",
    "kind": "member",
    "lineno": 125,
    "locus": "Server",
    "longname": "User.getAllCollaborations",
    "memberof": "User",
    "name": "getAllCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Parses the collaborations graph, and returns a list of all collaborations that a user has reciprical access to.  Uses a transitive closure algorithm to walk the collaboration graph.",
    "version": "1.2.3"
  },
  "User.getCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nselectedUser.getCollaborations().forEach(function(collaboration){\n  console.log(collaboration.name);\n});\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.user.js",
    "kind": "member",
    "lineno": 79,
    "longname": "User.getCollaborations",
    "memberof": "User",
    "name": "getCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets an array of all the collaborations that a user is associated with.",
    "version": "1.2.3"
  },
  "User.givenName": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nconsole.log(selectedUser.givenName());\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 94,
    "longname": "User.givenName",
    "memberof": "User",
    "name": "givenName",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the given (first) name of the user.",
    "version": "1.2.3"
  },
  "User.hasNoCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nif(selectedUser.hasNoCollaborations()){\n  Router.go('/path/to/collaboration/signup');\n};\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.user.js",
    "kind": "member",
    "lineno": 30,
    "longname": "User.hasNoCollaborations",
    "memberof": "User",
    "name": "hasNoCollaborations",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Whether the person is associated with a collaboration or a new user.",
    "version": "1.2.3"
  },
  "User.isMemberOfAnyCollaboration": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nif(selectedUser.isMemberOfAnyCollaboration()){\n  Hipaa.logEntry('A team collaborator did something that requires logging.')\n} else {\n  Router.go('/path/to/collaboration/signup');\n};\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.user.js",
    "kind": "member",
    "lineno": 6,
    "longname": "User.isMemberOfAnyCollaboration",
    "memberof": "User",
    "name": "isMemberOfAnyCollaboration",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Whether the person is associated with a collaboration.  Helps in determining if an account is newly created, a patient, research subject, or member of a clinical collaboration.  An account that is a member of a collaboration will typically have more access, but will have regulatory oversite and auditing (i.e. subject to HIPAA tracking and auditing).",
    "version": "1.2.3"
  },
  "User.isMemberOfCollaboration": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nif(selectedUser.hasNoCollaborations()){\n  Router.go('/path/to/collaboration/signup');\n};\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.user.js",
    "kind": "member",
    "lineno": 52,
    "longname": "User.isMemberOfCollaboration",
    "memberof": "User",
    "name": "isMemberOfCollaboration",
    "params": [
      {
        "description": "<p>The MongoId of the collaboration.</p>",
        "name": "collaborationId"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines if a user is associated with a specific collaboration.",
    "version": "1.2.3"
  },
  "User.isSelf": {
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/lib/user-model.js",
    "kind": "member",
    "lineno": 53,
    "longname": "User.isSelf",
    "memberof": "User",
    "name": "isSelf",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Check if the this user is the current logged in user or the specified user.",
    "version": "1.2.3"
  },
  "User.syncCollaborations": {
    "examples": [
      "```js\nvar selectedUser = Meteor.users.findOne({username: \"janedoe\"});\nselectedUser.syncCollaborations();\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-collaborations/lib/object.user.js",
    "kind": "member",
    "lineno": 203,
    "locus": "Anywhere",
    "longname": "User.syncCollaborations",
    "memberof": "User",
    "name": "syncCollaborations",
    "scope": "static",
    "summary": "Makes sure the user account is synchronized with the current User model.  Basically a save() function for collaborations.",
    "version": "1.2.3"
  },
  "User.{{fullName}}": {
    "examples": [
      "```html\n<div>{{fullName}}</div>\n```"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-user-model/client/template.helpers.js",
    "kind": "member",
    "lineno": 1,
    "longname": "User.{{fullName}}",
    "memberof": "User",
    "name": "{{fullName}}",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the full name of the user.",
    "version": "1.2.3"
  },
  "module:Roles.GLOBAL_GROUP": {
    "examples": [
      "Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)\n    Roles.userIsInRole(user, 'admin') // => true\n\n    Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)\n    Roles.userIsInRole(user, 'support-staff') // => true\n    Roles.userIsInRole(user, 'admin') // => false"
    ],
    "filepath": "https://github.com/clinical-meteor//packages/clinical-roles/lib/roles_common.js",
    "kind": "member",
    "lineno": 52,
    "longname": "module:Roles.GLOBAL_GROUP",
    "memberof": "module:Roles",
    "name": "GLOBAL_GROUP",
    "properties": [
      {
        "name": "GLOBAL_GROUP"
      }
    ],
    "readonly": true,
    "scope": "static",
    "summary": "Constant used to reference the special 'global' group that\ncan be used to apply blanket permissions across all groups.",
    "type": {
      "names": [
        "String"
      ]
    }
  }
};